{"main.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/CommandLineTestRunner.h\"\n#include <stdio.h>\n\n//please do not change these messages\nconst char * writing = \"I'm writing and building.\";\nconst char * testing = \"[  FAILED  ] Testing, with more to do.\";\nconst char * working = \"[  PASSED  ] I'm done testing and my code works!\";\nconst char * test_driving = \"I'm test-driving.\";\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    const char * exercise_state = test_driving;\n\n    int result = RUN_ALL_TESTS(ac, av);\n\n    printf(\"%s\\n\", exercise_state);\n\n    return result;\n}\n\n","CircularBuffer.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CircularBuffer.h\"\n\n/* Changes i would do:\n   use typedef to define struct type\n   use typdef to define element type, easier to change later, but the prototypes are fixed\n   use the return value of each API as success/error indicator and pass the struct\n       as context(pointer to it)\n*/\n\n/* Utility macros*/\n//#define GET_FREE_SPACE(size,wPos,rPos) ( (wPos==rPos)?(size):((size-(wPos-rPos))%(size)) )\n//#define GET_USED_SPACE(size,wPos,rPos) ( (wPos==rPos)?(size):((size-(wPos-rPos))%(size)) )\n#define GET_ABS_POS_DIST(size,wPos,rPos) ( (wPos==rPos)?(size):((size-(wPos-rPos))%(size)) )\n#define WRAP_INC_POS(size,pos) pos = (pos+1)%(size)\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value)\n{    \n    struct CircularBuffer * pSelf = (struct CircularBuffer *)malloc(sizeof(struct CircularBuffer));\n    \n    pSelf->size     = capacity;\n    pSelf->wPos     = 0;\n    pSelf->rPos     = 0;\n    pSelf->fullFlag = false;\n    pSelf->emptyFlag= true;\n    pSelf->initVal  = default_value;\n    pSelf->pBuffer  = (int*)malloc(sizeof(int)/sizeof(unsigned char)*capacity);\n        \n    for(unsigned int i=0; i<capacity; i++)\n    {\n        pSelf->pBuffer[i] = default_value;\n    }\n    \n    return pSelf;\n}//CircularBuffer_Create(\n\nvoid CircularBuffer_Destroy(struct CircularBuffer * pSelf)\n{\n    free(pSelf->pBuffer);\n    free(pSelf);\n}\n\nunsigned int CircularBuffer_Capacity(struct CircularBuffer * pSelf)\n{\n    return pSelf->size;\n}\n\nbool CircularBuffer_Put(struct CircularBuffer * pSelf, int inValue)\n{\n    if( (GET_ABS_POS_DIST(pSelf->size,pSelf->wPos,pSelf->rPos) == 0) ||\n        (pSelf->fullFlag) )\n    {\n        //in case its full, return false\n        return false;\n    }   \n    else\n    {\n        //insert element\n        pSelf->pBuffer[pSelf->wPos] = inValue;\n        pSelf->emptyFlag = false;\n        \n        WRAP_INC_POS(pSelf->size,pSelf->wPos);\n        if(pSelf->rPos == pSelf->wPos)\n            pSelf->fullFlag = true;\n        \n        return true;\n    }\n}//bool CircularBuffer_Put(\n\nint CircularBuffer_Get(struct CircularBuffer * pSelf)\n{\n    if( (GET_ABS_POS_DIST(pSelf->size,pSelf->wPos,pSelf->rPos) == 0) ||\n        (pSelf->emptyFlag) )\n    {\n        //buffer empty, return initvalue\n        return pSelf->initVal;\n    }\n    else\n    {\n        int retVal = pSelf->pBuffer[pSelf->rPos];\n        pSelf->fullFlag = false;\n        \n        WRAP_INC_POS(pSelf->size,pSelf->rPos);\n        if(pSelf->rPos == pSelf->wPos)\n            pSelf->emptyFlag = true;\n        \n        return retVal;\n    }\n}//int CircularBuffer_Get(\n\n\n\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#ifndef CIRCULAR_BUFFER_INCLUDED\n#define CIRCULAR_BUFFER_INCLUDED\n\n#include <stdbool.h>\n\n// You should not change this file\n//@Laszlo I had to change it to put the struct definition in\n\nstruct CircularBuffer\n{\n    unsigned int  size;\n    unsigned int  wPos;\n    unsigned int  rPos;\n    bool          fullFlag;\n    bool          emptyFlag;\n    int           initVal;\n    int           *pBuffer;\n};\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value);\nvoid CircularBuffer_Destroy(struct CircularBuffer *);\nbool CircularBuffer_IsEmpty(struct CircularBuffer *);\nbool CircularBuffer_IsFull(struct CircularBuffer *);\nbool CircularBuffer_Put(struct CircularBuffer *, int);\nint CircularBuffer_Get(struct CircularBuffer *);\nunsigned int CircularBuffer_Capacity(struct CircularBuffer *);\n\n#endif\n","CircularBufferTest.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/TestHarness.h\"\n\nextern \"C\"\n{\n#include \"CircularBuffer.h\"\n}\n\n// Everything in the test group is available\n// to associated test cases\nTEST_GROUP(CircularBuffer)\n{\n    CircularBuffer * pElementUnderTest;\n    unsigned int capacity = 10;\n    int empty_value = -1;\n    \n    int inStartValue = 0;\n    int inStepValue  = 2;\n    \n\n    // setup runs before each test\n    void setup()\n    {\n        pElementUnderTest = CircularBuffer_Create(capacity, empty_value);\n    }\n\n    // teardown runs after each test\n    void teardown()\n    {\n        CircularBuffer_Destroy(pElementUnderTest);\n    }\n};\n\n// PUSH THE TEST BUTTON WHEN YOU START TO WORK\n// Pushing the test button saves your work and runs the build.\n\n// each test gets a fresh CircularBuffer\nTEST(CircularBuffer, create_destroy)\n{\n    //FAIL(\"Start here\");\nunsigned int i=0; //used for index\nunsigned int tmp; //general purpose temporary var\n         int buff=0; //general buffer storage\n\n    \n/*Positive tests(expected to pass)*/\n    \n    //Sanity boundary test, parse trough the complete array\n    for(i=0;i<capacity;i++)\n    {\n        LONGS_EQUAL(pElementUnderTest->pBuffer[i], empty_value);\n    }  \n\n/* Interface (API) tests */\n    //Check the _Get for empty indication, expecting the empty value\n    LONGS_EQUAL(CircularBuffer_Get(pElementUnderTest), empty_value);\n    \n    //Fill the buffer with the _Put, expecting true\n    for(i=0;i<capacity;i++)\n    {\n        printf(\"Running the Fill_Up_Pos_Test, wPos: %i , putValue: %i \",\\\n                                              pElementUnderTest->wPos ,\\\n                                              inStartValue+i         );\n        \n        CHECK_TRUE(CircularBuffer_Put(pElementUnderTest,inStartValue+i));\n        printf(\" -- Test iteration Pass\\n\");\n    }   \n    \n    //Check the fullness, with one extra _put\n    printf(\"Running the Fill_Up_Neg_Test, wPos: %i \\n\\n\",pElementUnderTest->wPos);\n    CHECK_FALSE(CircularBuffer_Put(pElementUnderTest,capacity));\n    \n    //Empty the buffer with the _Get, expecting the sequantially written in values\n    for(i=0;i<capacity;i++)\n    {         \n        printf(\"Running the Empty_Pos_Test, rPos: %i, expVal: %i \",\\\n                                                  pElementUnderTest->rPos,     \\\n                                                  inStartValue+i);\n        \n        buff = CircularBuffer_Get(pElementUnderTest);\n        LONGS_EQUAL((inStartValue+i),buff);\n        printf(\" -- Test iteration Pass\\n\");\n    }   \n    \n    //Check the emptyness, with one extra _get\n    printf(\"Running the Empty_Neg_Test, rPos: %i \\n\\n\",pElementUnderTest->rPos);\n    buff = CircularBuffer_Get(pElementUnderTest);\n    LONGS_EQUAL(empty_value,buff);\n    \n    //1+1 W_Follow_me test, the read position follows the write position\n    tmp = capacity*4+1; //to have an odd number\n    for(i=0;i<tmp;i++)\n    {         \n        printf(\"Running the W_Follow_Me_Test \");\n        printf(\" - wPos: %i , putValue: %i \",\\\n                   pElementUnderTest->wPos  ,\\\n                   inStartValue+i         );\n        \n        CHECK_TRUE(CircularBuffer_Put(pElementUnderTest,inStartValue+i));\n        printf(\" -- Test W Step Pass\");\n        \n        printf(\" - rPos: %i, expVal: %i \" , \\\n                   pElementUnderTest->rPos, \\\n                   inStartValue+i);\n        \n        buff = CircularBuffer_Get(pElementUnderTest);\n        LONGS_EQUAL((inStartValue+i),buff);\n        printf(\" -- Test R Pass\");\n              \n        printf(\" >> Test iteration Pass\\n\");\n    }   \n        \n    //Check the emptyness, with one extra _get\n    printf(\"Running the Empty_Neg_Test, rPos: %i \\n\\n\",pElementUnderTest->rPos);\n    buff = CircularBuffer_Get(pElementUnderTest);\n    LONGS_EQUAL(empty_value,buff);\n    \n    //1+1 R_Follow_me test, the write position follows the read position\n    int testStartVal = inStartValue+inStepValue;\n    //put 1 test value in\n    CHECK_TRUE(CircularBuffer_Put(pElementUnderTest,testStartVal));\n    \n    tmp = capacity*4+1; //to have an odd number\n    for(i=0;i<tmp;i++)\n    {         \n        printf(\"Running the R_Follow_Me_Test \");\n        printf(\" - rPos: %i, expVal: %i \" , \\\n                   pElementUnderTest->rPos, \\\n                   testStartVal+i);\n        \n        //read one value\n        buff = CircularBuffer_Get(pElementUnderTest);\n        LONGS_NEQUAL((testStartVal+i),buff+1);\n        printf(\" -- Test R Pass\");\n              \n               \n        printf(\" - wPos: %i , putValue: %i \",\\\n                   pElementUnderTest->wPos ,\\\n                   testStartVal+i         );\n        \n        //write in one value\n        CHECK_TRUE(CircularBuffer_Put(pElementUnderTest,buff+i));\n        printf(\" -- Test W Step Pass\");\n              \n        printf(\" >> Test iteration Pass\\n\");\n    }   \n\n//Memory leakage test ?    \n    \n//Negative tests(expected to fail) ?\n    \n}//TEST(CircularBuffer, create_destroy)\n","cyber-dojo.sh":"export CPPUTEST_HOME=/cpputest\n\nmake\n\n\n","makefile":"#Set this to @ to keep the makefile quiet\nSILENCE = @\n\n#---- Outputs ----#\nCOMPONENT_NAME = CircularBuffer\n\n#--- Inputs ----#\nPROJECT_HOME_DIR = .\n\nSRC_FILES = CircularBuffer.c\n\nTEST_SRC_FILES = CircularBufferTest.cpp main.cpp\n\nINCLUDE_DIRS =\\\n  .\\\n  $(CPPUTEST_HOME)/include/ \\\n  $(CPPUTEST_HOME)/include/Platforms/Gcc\\\n\nCPPUTEST_WARNINGFLAGS += -Wall \nCPPUTEST_WARNINGFLAGS += -Werror\nCPPUTEST_WARNINGFLAGS += -Wswitch-default\nCPPUTEST_WARNINGFLAGS += -Wfatal-errors\nCPPUTEST_CXXFLAGS +=  -std=c++0x\nCPPUTEST_CFLAGS += -std=c99\nCPPUTEST_CFLAGS += -Wno-unused-parameter\nCPPUTEST_CXXFLAGS += $(CPPUTEST_PLATFORM_CXXFLAGS)\n\ninclude $(CPPUTEST_HOME)/build/MakefileWorker.mk\n","make-gcov.sh":"#!/bin/bash \n\nmake clean\nmake CPPUTEST_USE_GCOV=Y  gcov\n\nfind . -name \"*.cpp.gcov\" | xargs cat\nfind . -name \"*.c.gcov\"| xargs cat\n\nmake clean\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nEmail research -at- wingman-sw.com with questions or suggestions.  \n\nAbout you\n---------\nPlease add some information about youself when you start the\nexercise. Pressing the 'test' button saves all\nyour edits.  I may email you about your exercise and what I \ndiscover.\n\nYou should consider your code public, I may respectively\ninclude it in tweets or blog articles. I will not reveal \nyour name, unless you want me too.  If you choose to tweet\nabout the exercise, please tag me @jwgrenning.\n\nWhat is your level of C experience (delete choices that are not you)?\n- I program in C everyday\n\nPlease say something about your engineering/programming background:\n\nPUSH THE TEST BUTTON NOW TO SAVE YOUR WORK AND\nRECORD THE START TIME OF YOUR EXERCISE.\n\nIf you take some breaks during the exercise, please add\nthe time and durattion of your break here.\n\nWill you do (please delete all but one choice):\n- test-driven\n\n\nObjective\n---------\nWrite a CircularBuffer module in c and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * returns false\n  * loses no prior values\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc or calloc failures\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\n\nWrite CircularBuffer.c.  Once it compiles, test that the\nCircularBuffer is working.  Use the provided main.c to exercise\nyour CircularBuffer.\n\nPlease do all your work in this cyber-dojo environment.\n\nNOTE: In the main file, that there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are going to start testing, set the variable to\n'testing'. Once you are satisfied that your code works, set it \nto 'working'.  If you are test-driving, there is a setting for you\ntoo.\n\nEmail research -at- wingman-sw.com when you have completed your\nCircularBuffer.\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run main.c by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to make clean.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","output":"compiling CircularBufferTest.cpp\n/cpputest/build/MakefileWorker.mk:502: recipe for target 'objs/CircularBufferTest.o' failed\nCircularBufferTest.cpp: In member function 'virtual void TEST_CircularBuffer_create_destroy_Test::testBody()':\nCircularBufferTest.cpp:134:9: error: 'LONGS_NEQUAL' was not declared in this scope\n         LONGS_NEQUAL((testStartVal+i),buff+1);\n         ^~~~~~~~~~~~\ncompilation terminated due to -Wfatal-errors.\nmake: *** [objs/CircularBufferTest.o] Error 1\n"}