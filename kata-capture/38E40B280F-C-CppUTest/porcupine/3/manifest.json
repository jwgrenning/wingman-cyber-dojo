{"main.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/CommandLineTestRunner.h\"\n#include <stdio.h>\n\n//please do not change these messages\nconst char * writing = \"I'm writing and building.\";\nconst char * testing = \"[  FAILED  ] Testing, with more to do.\";\nconst char * working = \"[  PASSED  ] I'm done testing and my code works!\";\nconst char * test_driving = \"I'm test-driving.\";\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    const char * exercise_state = writing;\n\n    int result = RUN_ALL_TESTS(ac, av);\n\n    printf(\"%s\\n\", exercise_state);\n\n    return result;\n}\n\n","CircularBuffer.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CircularBuffer.h\"\n\nstruct CircularBuffer\n{\n    // int place_holder_delete_me_after_you_add_your_own_members;\n    int InIndex;\n    int OutIndex;\n    bool Empty;\n    bool Full;\n    int DefaultValue;\n    int Capacity;\n    int *Buffer;\n};\n\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value)\n{\n    // struct CircularBuffer * self = (struct CircularBuffer *)calloc(1, sizeof(struct CircularBuffer));\n    // return self;\n    struct * CircularBuffer Buff;\n\n    Buff = (struct CircularBuffer *)calloc (1, sizeof(CircularBuffer);\n    if (0 == Buff) return 0; // error if calloc returns NULL\n\n    if (capacity <=0) return 0; // error for nagative, zero or more that MAX_SIZE.\n    Buff->Capacity = capacity; // Initialize capacity\n    Buff->Buffer = calloc (capacity, sizeof(int)); // allocate buffer.\n    if (0 == Buff->Buffer) return 0; // error if calloc returns NULL\n    // Init the structure.\n    Buff->InIndex = 0;  // In point to first in buffer\n    Buff->OutIndex = 0; // Out point to first in buffer \n    Buff->Empty = TRUE; // Set Empty falg\n    Buff->Full = FASLE; // Clear Full flag \n    Buff->DefaultValue = default_value; // copy defualt value from caller.\n    return Buff;\n}\n\nvoid CircularBuffer_Destroy(struct CircularBuffer * self)\n{\n    free(self->Buffer); // free the allocated integre storage buffer\n    free(self); // free the allocated structure.\n}\n\nbool CircularBuffer_IsEmpty(struct CircularBuffer * buf)\n{\n    return buff->Empty; // return Empty flag\n}\n\nbool CircularBuffer_IsFull(struct CircularBuffer * buff)\n{\n    return buff->Full; // return Full Flag\n}\n\nbool CircularBuffer_Put(struct CircularBuffer * buff, int val)\n{\n    if (TRUE == buff->Fuff) return FALSE;\n    buff->Buffer[buff->InIndex] = val; // put the value in buffer.\n    buff->Empty = FALSE; // clear empty flag.\n    InIndex++; // point to next\n    if (buff->InIndex == buff->capacity) buff->InIndex = 0;\n    if (buff->InIndex == buff->OutIndex) buff->Full = TRUE;\n    return TRUE;\n}\n\nint CircularBuffer_Get(struct CircularBuffer * buff)\n{\n    int temp;\n    if (TRUE == buff->Empty) return buff->DefaultValue;\n    temp = buff->Buffer[buff->OutIndex]; // copy value \n    buff->Full = FALSE; // Clear Full flag\n    buff->OutIndex++; // point to next;\n    if (buff->OutIndex == buff->capacity) buff->OutIndex = 0;\n    if (buff->InIndex == buff->OutIndex) buff->Empty = TRUE;\n    return temp;\n}\n\n// PUSH THE TEST BUTTON WHEN YOU START TO WORK\n// Pushing the test button saves your work and runs the build.\n\n\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#ifndef CIRCULAR_BUFFER_INCLUDED\n#define CIRCULAR_BUFFER_INCLUDED\n\n#include <stdbool.h>\n\n// You should not change this file\n\nstruct CircularBuffer;\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value);\nvoid CircularBuffer_Destroy(struct CircularBuffer *);\nbool CircularBuffer_IsEmpty(struct CircularBuffer *);\nbool CircularBuffer_IsFull(struct CircularBuffer *);\nbool CircularBuffer_Put(struct CircularBuffer *, int);\nint CircularBuffer_Get(struct CircularBuffer *);\nunsigned int CircularBuffer_Capacity(struct CircularBuffer *);\n\n#endif\n","CircularBufferTest.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/TestHarness.h\"\n\nextern \"C\"\n{\n#include \"CircularBuffer.h\"\n}\n\n// Everything in the test group is available\n// to associated test cases\nTEST_GROUP(CircularBuffer)\n{\n    CircularBuffer * buffer;\n    unsigned int capacity = 10;\n    int empty_value = -1;\n\n    // setup runs before each test\n    void setup()\n    {\n        buffer = CircularBuffer_Create(capacity, empty_value);\n    }\n\n    // teardown runs after each test\n    void teardown()\n    {\n        CircularBuffer_Destroy(buffer);\n    }\n};\n\n// PUSH THE TEST BUTTON WHEN YOU START TO WORK\n// Pushing the test button saves your work and runs the build.\n\n// each test gets a fresh CurcularBuffer\nTEST(CircularBuffer, create_destroy)\n{\n    FAIL(\"Start here\");\n// These are all the macros you will need.\n//    LONGS_EQUAL(0, 1); // will fail\n//    CHECK_TRUE(false); // will fail\n//    CHECK_FALSE(true); // will fail\n}\n","cyber-dojo.sh":"export CPPUTEST_HOME=/cpputest\n\nmake\n\n\n","makefile":"#Set this to @ to keep the makefile quiet\nSILENCE = @\n\n#---- Outputs ----#\nCOMPONENT_NAME = CircularBuffer\n\n#--- Inputs ----#\nPROJECT_HOME_DIR = .\n\nSRC_FILES = CircularBuffer.c\n\nTEST_SRC_FILES = CircularBufferTest.cpp main.cpp\n\nINCLUDE_DIRS =\\\n  .\\\n  $(CPPUTEST_HOME)/include/ \\\n  $(CPPUTEST_HOME)/include/Platforms/Gcc\\\n\nCPPUTEST_WARNINGFLAGS += -Wall \nCPPUTEST_WARNINGFLAGS += -Werror\nCPPUTEST_WARNINGFLAGS += -Wswitch-default\nCPPUTEST_WARNINGFLAGS += -Wfatal-errors\nCPPUTEST_CXXFLAGS +=  -std=c++0x\nCPPUTEST_CFLAGS += -std=c99\nCPPUTEST_CFLAGS += -Wno-unused-parameter\nCPPUTEST_CXXFLAGS += $(CPPUTEST_PLATFORM_CXXFLAGS)\n\ninclude $(CPPUTEST_HOME)/build/MakefileWorker.mk\n","make-gcov.sh":"#!/bin/bash \n\nmake clean\nmake CPPUTEST_USE_GCOV=Y  gcov\n\nfind . -name \"*.cpp.gcov\" | xargs cat\nfind . -name \"*.c.gcov\"| xargs cat\n\nmake clean\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nEmail research -at- wingman-sw.com with questions or suggestions.  \n\nAbout you\n---------\nPlease add some information about youself when you start the\nexercise. Pressing the 'test' button saves all\nyour edits.  I may email you about your exercise and what I \ndiscover.\n\nYou should consider your code public, I may respectively\ninclude it in tweets or blog articles. I will not reveal \nyour name, unless you want me too.  If you choose to tweet\nabout the exercise, please tag me @jwgrenning.\n\nWhat is your level of C experience (delete choices that are not you)?\n- I program in C everyday\n- I have programmed in C recently\n- I have programmed in C, but not recently\n- I programmed in C long long ago\n- I never programmed in C\n\nPlease say something about your engineering/programming background:\n\nPUSH THE TEST BUTTON NOW TO SAVE YOUR WORK AND\nRECORD THE START TIME OF YOUR EXERCISE.\n\nIf you take some breaks during the exercise, please add\nthe time and durattion of your break here.\n\nWill you do (please delete all but one choice):\n- test-driven\n- test-first\n- test-after\n- test-when-i-feel-like-it \n\nObjective\n---------\nWrite a CircularBuffer module in c and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * returns false\n  * loses no prior values\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc or calloc failures\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\n\nWrite CircularBuffer.c.  Once it compiles, test that the\nCircularBuffer is working.  Use the provided main.c to exercise\nyour CircularBuffer.\n\nPlease do all your work in this cyber-dojo environment.\n\nNOTE: In the main file, that there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are going to start testing, set the variable to\n'testing'. Once you are satisfied that your code works, set it \nto 'working'.  If you are test-driving, there is a setting for you\ntoo.\n\nEmail research -at- wingman-sw.com when you have completed your\nCircularBuffer.\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run main.c by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to make clean.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","output":"compiling CircularBuffer.c\n/cpputest/build/MakefileWorker.mk:507: recipe for target 'objs/CircularBuffer.o' failed\nCircularBuffer.c: In function 'CircularBuffer_Create':\nCircularBuffer.c:22:12: error: expected '{' before '*' token\n     struct * CircularBuffer Buff;\n            ^\ncompilation terminated due to -Wfatal-errors.\nmake: *** [objs/CircularBuffer.o] Error 1\n"}