{"main.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/CommandLineTestRunner.h\"\n#include <stdio.h>\n\n//please do not change these messages\nconst char * writing = \"I'm writing and building.\";\nconst char * testing = \"[  FAILED  ] Testing, with more to do.\";\nconst char * working = \"[  PASSED  ] I'm done testing and my code works!\";\nconst char * test_driving = \"I'm test-driving.\";\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    // const char * exercise_state = writing;\n    const char * exercise_state = testing;\n\n    int result = RUN_ALL_TESTS(ac, av);\n\n    printf(\"%s\\n\", exercise_state);\n\n    return result;\n}\n\n","CircularBuffer.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CircularBuffer.h\"\n// Name BV Ramesh.\n\n// Embedded System Engineer.\n// Age ~ 60 years.\n// Programing in C few years ago. (5-6)\n// did M.Sc in Physics with electronics specialization\n// Involved in designing and development of Embedded system Hardware\n// Involved in system architecture, requirements analysis.\n//\n// I have given up after 11 times of compilation.\n// Looks like lot to study on basics.\n// RESTARTED AFTER 11TH ATTEMPT...\n//\n// Today I am giving my contact details... sorry in hurry \n// I could not give yesterday\n//\n// email: rameshbv10@gmail.com\n// twitter: twitter.com/BVRamesh100\n//\n\n#include <stdio.h>\n\nstruct CircularBuffer\n{\n    // int place_holder_delete_me_after_you_add_your_own_members;\n    int InIndex;\n    int OutIndex;\n    bool Empty;\n    bool Full;\n    int DefaultValue;\n    unsigned int Capacity;\n    int *Buffer;\n};\n\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value)\n{\n    // struct CircularBuffer * self = (struct CircularBuffer *)calloc(1, sizeof(struct CircularBuffer));\n    // return self;\n    struct CircularBuffer * self;\n\n    self = (struct CircularBuffer *)calloc (1, sizeof(struct CircularBuffer));\n    if ((0) == self) {\n        printf (\"self - allocation failed.\\n\");\n        return (struct CircularBuffer *) 0; // error if calloc returns NULL\n    }\n    printf (\"self - allocated.\\n\");\n\n    if (0 == capacity) { // error for zero.\n        free (self);\n        return (struct CircularBuffer *) 0;\n    }\n\n    self->Capacity = capacity; // Initialize capacity\n    self->Buffer = (int *) calloc (capacity, sizeof(int)); // allocate buffer.\n    if ((0) == self->Buffer) { // error if calloc returns NULL\n        printf (\"self->Buffer - allocation failed.\\n\");\n        free (self);\n        return (struct CircularBuffer *) 0;\n    }\n\n    printf (\"self->Buffer - allocated.\\n\");\n    // Init the structure.\n    self->InIndex = 0;  // In point to first in buffer\n    self->OutIndex = 0; // Out point to first in buffer \n    self->Empty = (bool) 1; // Set Empty falg\n    self->Full = (bool) 0; // Clear Full flag \n    self->DefaultValue = default_value; // copy defualt value from caller.\n    printf (\"self - initialized.\\n\");\n    return self;\n}\n\nvoid CircularBuffer_Destroy(struct CircularBuffer * self)\n{\n    free (self->Buffer); // free the allocated integer storage buffer\n    free (self); // free the allocated structure.\n}\n\nbool CircularBuffer_IsEmpty(struct CircularBuffer * buff)\n{\n    return buff->Empty; // return Empty flag\n}\n\nbool CircularBuffer_IsFull(struct CircularBuffer * buff)\n{\n    return buff->Full; // return Full Flag\n}\n\nbool CircularBuffer_Put(struct CircularBuffer * buff, int val)\n{\n    if (buff->Full) return (bool) 0; // existig data not touched.\n    printf (\"Adding element %d at %d.\\n\", val, buff->InIndex);\n    buff->Buffer[buff->InIndex] = val; // put the value in buffer.\n    buff->Empty = (bool) 0; // clear empty flag.\n    buff->InIndex++; // point to next\n    if (buff->InIndex == buff->Capacity) buff->InIndex = 0;\n    if (buff->InIndex == buff->OutIndex) buff->Full = (bool) 1;\n    return (bool) 1;\n}\n\nint CircularBuffer_Get(struct CircularBuffer * buff)\n{\n    int temp;\n    if (buff->Empty) return buff->DefaultValue;\n    temp = buff->Buffer[buff->OutIndex]; // copy value \n    printf (\"Removing element %d at %d.\\n\", temp, buff->OutIndex);\n    buff->Full = (bool) 0; // Clear Full flag\n    buff->OutIndex++; // point to next;\n    if (buff->OutIndex == buff->Capacity) buff->OutIndex = 0;\n    if (buff->InIndex == buff->OutIndex) buff->Empty = (bool) 0;\n    return temp;\n}\n\nunsigned int CircularBuffer_Capacity(struct CircularBuffer * buff)\n{\n    if (buff->Empty) return buff->Capacity; // if empty - full capacity\n    if (buff->Full) return 0; // if full no space.\n    if (buff->OutIndex > buff->InIndex)\n        return (buff->OutIndex - buff->InIndex); // difference between indicies.\n    else return ((buff->Capacity + buff->InIndex) - buff->OutIndex); \n}\n\n// PUSH THE TEST BUTTON WHEN YOU START TO WORK\n// Pushing the test button saves your work and runs the build.\n\n// Sir could not find out which all tests it failed.\n// please communicate it to me.\n// Regards,\n// BV Ramesh.\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#ifndef CIRCULAR_BUFFER_INCLUDED\n#define CIRCULAR_BUFFER_INCLUDED\n\n#include <stdbool.h>\n\n// You should not change this file\n\nstruct CircularBuffer;\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value);\nvoid CircularBuffer_Destroy(struct CircularBuffer *);\nbool CircularBuffer_IsEmpty(struct CircularBuffer *);\nbool CircularBuffer_IsFull(struct CircularBuffer *);\nbool CircularBuffer_Put(struct CircularBuffer *, int);\nint CircularBuffer_Get(struct CircularBuffer *);\nunsigned int CircularBuffer_Capacity(struct CircularBuffer *);\n\n#endif\n","CircularBufferTest.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/TestHarness.h\"\n\nextern \"C\"\n{\n#include \"CircularBuffer.h\"\n}\n\n// Everything in the test group is available\n// to associated test cases\nTEST_GROUP(CircularBuffer)\n{\n    CircularBuffer * buffer;\n    unsigned int capacity = 10;\n    int empty_value = -1;\n\n    // setup runs before each test\n    void setup()\n    {\n        buffer = CircularBuffer_Create(capacity, empty_value);\n    }\n\n    // teardown runs after each test\n    void teardown()\n    {\n        CircularBuffer_Destroy(buffer);\n    }\n};\n\n// PUSH THE TEST BUTTON WHEN YOU START TO WORK\n// Pushing the test button saves your work and runs the build.\n\n// each test gets a fresh CurcularBuffer\nTEST(CircularBuffer, create_destroy)\n{\n//    FAIL(\"Start here\");\n// These are all the macros you will need.\n//    LONGS_EQUAL(0, 1); // will fail\n      CHECK_TRUE(false); // will fail\n//    CHECK_FALSE(true); // will fail\n}\n","cyber-dojo.sh":"export CPPUTEST_HOME=/cpputest\n\nmake clean\n\nmake\n","makefile":"#Set this to @ to keep the makefile quiet\nSILENCE = @\n\n#---- Outputs ----#\nCOMPONENT_NAME = CircularBuffer\n\n#--- Inputs ----#\nPROJECT_HOME_DIR = .\n\nSRC_FILES = CircularBuffer.c\n\nTEST_SRC_FILES = CircularBufferTest.cpp main.cpp\n\nINCLUDE_DIRS =\\\n  .\\\n  $(CPPUTEST_HOME)/include/ \\\n  $(CPPUTEST_HOME)/include/Platforms/Gcc\\\n\nCPPUTEST_WARNINGFLAGS += -Wall \nCPPUTEST_WARNINGFLAGS += -Werror\nCPPUTEST_WARNINGFLAGS += -Wswitch-default\nCPPUTEST_WARNINGFLAGS += -Wfatal-errors\nCPPUTEST_CXXFLAGS +=  -std=c++0x\nCPPUTEST_CFLAGS += -std=c99\nCPPUTEST_CFLAGS += -Wno-unused-parameter\nCPPUTEST_CXXFLAGS += $(CPPUTEST_PLATFORM_CXXFLAGS)\n\ninclude $(CPPUTEST_HOME)/build/MakefileWorker.mk\n","make-gcov.sh":"#!/bin/bash \n\nmake clean\nmake CPPUTEST_USE_GCOV=Y  gcov\n\nfind . -name \"*.cpp.gcov\" | xargs cat\nfind . -name \"*.c.gcov\"| xargs cat\n\nmake clean\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nEmail research -at- wingman-sw.com with questions or suggestions.  \n\nAbout you\n---------\nPlease add some information about youself when you start the\nexercise. Pressing the 'test' button saves all\nyour edits.  I may email you about your exercise and what I \ndiscover.\n\nYou should consider your code public, I may respectively\ninclude it in tweets or blog articles. I will not reveal \nyour name, unless you want me too.  If you choose to tweet\nabout the exercise, please tag me @jwgrenning.\n\nWhat is your level of C experience (delete choices that are not you)?\n- I have programmed in C, but not recently\nPlease say something about your engineering/programming background:\nMS in Physics with electronics specialization\nWorked in ISRO, DRDO, GE & Honeywell\n\nWorked on design and development of Embedded Hardware & firmware\nSystem architeture.\n\nPUSH THE TEST BUTTON NOW TO SAVE YOUR WORK AND\nRECORD THE START TIME OF YOUR EXERCISE.\n\nIf you take some breaks during the exercise, please add\nthe time and durattion of your break here.\n\nWill you do (please delete all but one choice):\n- test-after\n\nObjective\n---------\nWrite a CircularBuffer module in c and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * returns false\n  * loses no prior values\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc or calloc failures\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\n\nWrite CircularBuffer.c.  Once it compiles, test that the\nCircularBuffer is working.  Use the provided main.c to exercise\nyour CircularBuffer.\n\nPlease do all your work in this cyber-dojo environment.\n\nNOTE: In the main file, that there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are going to start testing, set the variable to\n'testing'. Once you are satisfied that your code works, set it \nto 'working'.  If you are test-driving, there is a setting for you\ntoo.\n\nEmail research -at- wingman-sw.com when you have completed your\nCircularBuffer.\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run main.c by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to make clean.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","output":"Making clean\ncompiling CircularBufferTest.cpp\ncompiling main.cpp\ncompiling CircularBuffer.c\nBuilding archive lib/libCircularBuffer.a\na - objs/CircularBuffer.o\nLinking CircularBuffer_tests\nRunning CircularBuffer_tests\nself - allocated.\nself->Buffer - allocated.\nself - initialized.\n\nCircularBufferTest.cpp:40: error: Failure in TEST(CircularBuffer, create_destroy)\n\tCHECK_TRUE(false) failed\n\n.\nErrors (1 failures, 1 tests, 1 ran, 1 checks, 0 ignored, 0 filtered out, 2 ms)\n\n[  FAILED  ] Testing, with more to do.\n/cpputest/build/MakefileWorker.mk:451: recipe for target 'all' failed\nmake: *** [all] Error 1\n"}