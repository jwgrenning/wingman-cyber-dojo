{"main.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/CommandLineTestRunner.h\"\n#include <stdio.h>\n\n//please do not change these messages\nstatic const char * writing = \"I'm writing and building.\";\nstatic const char * testing = \"[  FAILED  ] Testing, with more to do.\";\nstatic const char * working = \"[  PASSED  ] I'm done testing and my code works!\";\nstatic const char * test_driving = \"I'm test-driving.\";\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    const char * exercise_state = testing;\n\n    int result = RUN_ALL_TESTS(ac, av);\n\n    printf(\"%s\\n\", exercise_state);\n\n    return result;\n}\n\n","CircularBuffer.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CircularBuffer.h\"\n\n#include<stdio.h>\n\nstruct CircularBuffer\n{\n    int capacity;\n    int head;\n    int size;\n    int default_value;\n    int data[];\n};\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value)\n{\n    struct CircularBuffer * self = (struct CircularBuffer *)calloc(1, sizeof(struct CircularBuffer) + sizeof(int) * capacity);\n    self->default_value = default_value;\n    self->head = 0;\n    self->size = 0;\n    self->capacity = capacity;\n    return self;\n}\n\nvoid CircularBuffer_Destroy(struct CircularBuffer * self)\n{\n    free(self);\n}\n\nbool CircularBuffer_IsEmpty(struct CircularBuffer * self)\n{\n    return self->size == 0;\n}\n\nbool CircularBuffer_IsFull(struct CircularBuffer * self)\n{\n    return self->size == self->capacity;\n}\n\nbool CircularBuffer_Put(struct CircularBuffer * self, int value)\n{\n    printf(\"S: %u H: %u C: %u\\r\\n [%d, %d, %d, %d, %d, %d, %d, %d, %d, %d]\\r\\n\", self->size, self->head, self->capacity, self->data[0], self->data[1], self->data[2], self->data[3], self->data[4], self->data[5], self->data[6], self->data[7], self->data[8], self->data[9]);\n    if (CircularBuffer_IsFull(self))\n    {\n        return false;\n    }\n    \n    self->data[self->head] = value;\n    \n    self->head++;\n    self->size++;\n    \n    // Wrap on end\n    if (self->head >= self->capacity)\n    {\n        self->head = 0;\n    }\n    \n    return true;\n}\n\nint CircularBuffer_Get(struct CircularBuffer * self)\n{\n    if (CircularBuffer_IsEmpty(self))\n    {\n        return self->default_value;\n    }\n    \n    int index = self->head > self->size ? \n                self->head - self->size : \n                self->head + self->capacity - self->size; \n    int value = self->data[index];\n    \n    self->size--;\n    \n    return value;\n}\n    \n    \n\n// PUSH THE TEST BUTTON WHEN YOU START TO WORK\n// Pushing the test button saves your work and runs the build.\n\n\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#ifndef CIRCULAR_BUFFER_INCLUDED\n#define CIRCULAR_BUFFER_INCLUDED\n\n#include <stdbool.h>\n\n// You should not change this file. \n// The struct members go only in the .c file\n// You need to implement each function\n\nstruct CircularBuffer;\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value);\nvoid CircularBuffer_Destroy(struct CircularBuffer *);\nbool CircularBuffer_IsEmpty(struct CircularBuffer *);\nbool CircularBuffer_IsFull(struct CircularBuffer *);\nbool CircularBuffer_Put(struct CircularBuffer *, int);\nint CircularBuffer_Get(struct CircularBuffer *);\nunsigned int CircularBuffer_Capacity(struct CircularBuffer *);\n\n#endif\n","CircularBufferTest.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/TestHarness.h\"\n\nextern \"C\"\n{\n    #include \"CircularBuffer.h\"\n}\n\n\n// Everything in the test group is available\n// to associated test cases\nTEST_GROUP(CircularBuffer)\n{\n    CircularBuffer* buffer = 0;\n    const unsigned int capacity = 10;\n    const int emptyValue = -1;\n\n    // setup runs before each test\n    void setup()\n    {\n        buffer = CircularBuffer_Create(capacity, emptyValue);\n    }\n\n    // teardown runs after each test\n    void teardown()\n    {\n        CircularBuffer_Destroy(buffer);\n    }\n\n};\n\n// PUSH THE TEST BUTTON WHEN YOU START TO WORK\n// Pushing the test button saves your work and runs the build.\n\n// each test gets a fresh CurcularBuffer\nTEST(CircularBuffer, create_destroy)\n{\n    CHECK(CircularBuffer_IsEmpty(buffer));\n}\n\nTEST(CircularBuffer, get_default)\n{\n    CHECK(CircularBuffer_Get(buffer) == emptyValue);\n}\n\nTEST(CircularBuffer, should_return_false_when_full)\n{\n    for (uint32_t i = 0; i < capacity; i++)\n    {\n        printf(\"Inserting: %d\\r\\n\", i);\n        CHECK_TRUE(CircularBuffer_Put(buffer, i));\n    }\n    \n    for (uint32_t i = 0; i < capacity; i++)\n    {\n        printf(\"Check full at: %d\\r\\n\", i);\n        CHECK_TRUE(CircularBuffer_IsFull(buffer));\n        CHECK_FALSE(CircularBuffer_Put(buffer, 10 + i));\n        LONGS_EQUAL(CircularBuffer_Get(buffer), i);\n        CHECK_TRUE(CircularBuffer_Put(buffer, 10 + i));\n    }\n    \n    printf(\"Check full one more time on wrap\\r\\n\");\n    CHECK_TRUE(CircularBuffer_IsFull(buffer));\n\n    for (uint32_t i = 0; i < capacity; i++)\n    {\n        printf(\"Empty: %d\\r\\n\", i);\n\n        LONGS_EQUAL(CircularBuffer_Get(buffer), 10 + i);\n    }\n    \n            LONGS_EQUAL(CircularBuffer_Get(buffer), -1);\n\n}\n\n// Each test in a group must have a unique name\n// Make as many tests as you like\nTEST(CircularBuffer, test_with_all_the_macros_you_should_need_for_this_exercise)\n{\n    LONGS_EQUAL(capacity, 10);\n    LONGS_EQUAL(emptyValue, -1);\n    CHECK(buffer != 0);\n    CHECK(true);\n    CHECK_TRUE(true);\n    CHECK_FALSE(false);\n    // If you are not used to a xUnit style of test harness,\n    // please do the other exercise offered in the invitation.\n    // find more about CppUTest at cpputest.org\n}\n","cyber-dojo.sh":"export CPPUTEST_HOME=/cpputest\nmake\n# make clean\n\n\n","makefile":"#Set this to @ to keep the makefile quiet\nSILENCE = @\n\n#---- Outputs ----#\nCOMPONENT_NAME = CircularBuffer\n\n#--- Inputs ----#\nPROJECT_HOME_DIR = .\n\nSRC_FILES = CircularBuffer.cpp\n\nTEST_SRC_FILES = CircularBufferTest.cpp main.cpp\n\nINCLUDE_DIRS =\\\n  .\\\n  $(CPPUTEST_HOME)/include/ \\\n  $(CPPUTEST_HOME)/include/Platforms/Gcc\\\n\nCPPUTEST_CFLAGS += -std=c99\nCPPUTEST_CXXFLAGS += -std=c++11\nCPPUTEST_CFLAGS += -Wno-unused-parameter\nCPPUTEST_WARNINGFLAGS += -Wall \nCPPUTEST_WARNINGFLAGS += -Werror\nCPPUTEST_WARNINGFLAGS += -Wfatal-errors\nCPPUTEST_WARNINGFLAGS += -Wno-reserved-id-macro\nCPPUTEST_WARNINGFLAGS += -Wno-keyword-macro\nCPPUTEST_WARNINGFLAGS += -Wno-unused-variable\nCPPUTEST_WARNINGFLAGS += -Wno-c++98-compat-pedantic\nCPPUTEST_WARNINGFLAGS += -Wno-reserved-id-macro\ninclude $(CPPUTEST_HOME)/build/MakefileWorker.mk\n","make-gcov.sh":"#!/bin/bash \n\nmake clean\nmake CPPUTEST_USE_GCOV=Y  gcov\n\nfind . -name \"*.cpp.gcov\" | xargs cat\nfind . -name \"*.c.gcov\"| xargs cat\n\nmake clean\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nEmail research -at- wingman-sw.com with questions or suggestions.  \n\nI may email you about your exercise and what I discover.\n\nYou should consider your code public, I may respectively\ninclude it in tweets or blog articles. I will not reveal \nyour name, unless you want me too.  If you choose to tweet\nabout the exercise, please tag me @jwgrenning.\n\nAbout you\n---------\nPlease add some information about yourself when you start the\nexercise. Pressing the 'test' button saves all your edits.\n\nWhat is your level of C experience (delete choices that are not you)?\n- I have programmed in C recently\n\nPlease say something about your engineering/programming background:\n\nPUSH THE TEST BUTTON NOW TO SAVE YOUR WORK AND\nRECORD THE START TIME OF YOUR EXERCISE.\n\nIf you take some breaks during the exercise, please add\nthe time and durattion of your break here.\n\nWill you do (please delete all but one choice):\n- test-when-i-feel-like-it \n\nObjective\n---------\nWrite a CircularBuffer and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * preserves prior values\n  * returns false\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n* When you are finished, your production code should \n  run without printing anything.\n* Make your code clean and readble, something you'd\n  attach to your resume.\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc or calloc failures\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\n\nWrite and test CircularBuffer.  Use the provided CircularBufferTest.cpp\nto exercise your CircularBuffer.  Add as many test cases \nas you need.\n\nPlease do all your work in this cyber-dojo environment.\n\nIf you take any breaks, please let me know the approximate \ncycle number (upper right side of the red, green and \nyellow traffic lights) and duration.\n\n- +-8 min in round 10\n- +-40 min in round 16\n\nNOTE: In the main file, that there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are going to start testing, set the variable to\n'testing'. Once you are satisfied that your code works, set it \nto 'working'.  If you are test-driving, there is a setting for you\ntoo.\n\nEmail the URL of your exercises to 'research -at- wingman-sw.com'\nwhen you have completed your CircularBuffer.\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to make clean.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","output":"compiling CircularBufferTest.cpp\nLinking CircularBuffer_tests\nRunning CircularBuffer_tests\n.Inserting: 0\r\nS: 0 H: 0 C: 10\r\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\nInserting: 1\r\nS: 1 H: 1 C: 10\r\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\nInserting: 2\r\nS: 2 H: 2 C: 10\r\n [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\r\nInserting: 3\r\nS: 3 H: 3 C: 10\r\n [0, 1, 2, 0, 0, 0, 0, 0, 0, 0]\r\nInserting: 4\r\nS: 4 H: 4 C: 10\r\n [0, 1, 2, 3, 0, 0, 0, 0, 0, 0]\r\nInserting: 5\r\nS: 5 H: 5 C: 10\r\n [0, 1, 2, 3, 4, 0, 0, 0, 0, 0]\r\nInserting: 6\r\nS: 6 H: 6 C: 10\r\n [0, 1, 2, 3, 4, 5, 0, 0, 0, 0]\r\nInserting: 7\r\nS: 7 H: 7 C: 10\r\n [0, 1, 2, 3, 4, 5, 6, 0, 0, 0]\r\nInserting: 8\r\nS: 8 H: 8 C: 10\r\n [0, 1, 2, 3, 4, 5, 6, 7, 0, 0]\r\nInserting: 9\r\nS: 9 H: 9 C: 10\r\n [0, 1, 2, 3, 4, 5, 6, 7, 8, 0]\r\nCheck full at: 0\r\nS: 10 H: 0 C: 10\r\n [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nS: 9 H: 0 C: 10\r\n [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nCheck full at: 1\r\nS: 10 H: 1 C: 10\r\n [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nS: 9 H: 1 C: 10\r\n [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nCheck full at: 2\r\nS: 10 H: 2 C: 10\r\n [10, 11, 2, 3, 4, 5, 6, 7, 8, 9]\r\nS: 9 H: 2 C: 10\r\n [10, 11, 2, 3, 4, 5, 6, 7, 8, 9]\r\nCheck full at: 3\r\nS: 10 H: 3 C: 10\r\n [10, 11, 12, 3, 4, 5, 6, 7, 8, 9]\r\nS: 9 H: 3 C: 10\r\n [10, 11, 12, 3, 4, 5, 6, 7, 8, 9]\r\nCheck full at: 4\r\nS: 10 H: 4 C: 10\r\n [10, 11, 12, 13, 4, 5, 6, 7, 8, 9]\r\nS: 9 H: 4 C: 10\r\n [10, 11, 12, 13, 4, 5, 6, 7, 8, 9]\r\nCheck full at: 5\r\nS: 10 H: 5 C: 10\r\n [10, 11, 12, 13, 14, 5, 6, 7, 8, 9]\r\nS: 9 H: 5 C: 10\r\n [10, 11, 12, 13, 14, 5, 6, 7, 8, 9]\r\nCheck full at: 6\r\nS: 10 H: 6 C: 10\r\n [10, 11, 12, 13, 14, 15, 6, 7, 8, 9]\r\nS: 9 H: 6 C: 10\r\n [10, 11, 12, 13, 14, 15, 6, 7, 8, 9]\r\nCheck full at: 7\r\nS: 10 H: 7 C: 10\r\n [10, 11, 12, 13, 14, 15, 16, 7, 8, 9]\r\nS: 9 H: 7 C: 10\r\n [10, 11, 12, 13, 14, 15, 16, 7, 8, 9]\r\nCheck full at: 8\r\nS: 10 H: 8 C: 10\r\n [10, 11, 12, 13, 14, 15, 16, 17, 8, 9]\r\nS: 9 H: 8 C: 10\r\n [10, 11, 12, 13, 14, 15, 16, 17, 8, 9]\r\nCheck full at: 9\r\nS: 10 H: 9 C: 10\r\n [10, 11, 12, 13, 14, 15, 16, 17, 18, 9]\r\nS: 9 H: 9 C: 10\r\n [10, 11, 12, 13, 14, 15, 16, 17, 18, 9]\r\nCheck full one more time on wrap\r\nEmpty: 0\r\nEmpty: 1\r\nEmpty: 2\r\nEmpty: 3\r\nEmpty: 4\r\nEmpty: 5\r\nEmpty: 6\r\nEmpty: 7\r\nEmpty: 8\r\nEmpty: 9\r\n...\nOK (4 tests, 4 ran, 70 checks, 0 ignored, 0 filtered out, 1 ms)\n\n[  FAILED  ] Testing, with more to do.\n"}