{"main.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/CommandLineTestRunner.h\"\n#include <stdio.h>\n\n//please do not change these messages\nstatic const char * writing = \"I'm writing and building.\";\nstatic const char * testing = \"[  FAILED  ] Testing, with more to do.\";\nstatic const char * working = \"[  PASSED  ] I'm done testing and my code works!\";\nstatic const char * test_driving = \"I'm test-driving.\";\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    const char * exercise_state = test_driving;\n\n    int result = RUN_ALL_TESTS(ac, av);\n\n    printf(\"%s\\n\", exercise_state);\n\n    return result;\n}\n\n","CircularBuffer.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include <stdio.h>\n#include \"CircularBuffer.h\"\n\nstruct CircularBuffer\n{\n    int          * p_store;\n    unsigned int   capacity;\n    unsigned int   free_cnt;\n    unsigned int   index_in;\n    unsigned int   index_out;\n    int            default_value;\n};\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value)\n{\n    struct CircularBuffer * self = (struct CircularBuffer *)calloc(1, sizeof(struct CircularBuffer));\n    self->p_store       = (int *)calloc(capacity, sizeof(int));\n    self->capacity      = capacity;\n    self->free_cnt      = capacity;\n    self->index_in      = 0;\n    self->index_out     = 0;\n    self->default_value = default_value;\n    return self;\n}\n\nvoid CircularBuffer_Destroy(struct CircularBuffer * self)\n{\n    free(self->p_store);\n    free(self);\n}\n\nbool CircularBuffer_IsEmpty(struct CircularBuffer * self)\n{   \n    return (self->free_cnt == self->capacity);\n}\n\nbool CircularBuffer_IsFull(struct CircularBuffer * self)\n{\n    return (self->free_cnt == 0);\n}\n\nbool CircularBuffer_Put(struct CircularBuffer * self, int value)\n{\n    if (self->free_cnt > 0)\n    {\n        self->index_in = (self->index_in + 1) % self->capacity;\n\n        ((int *)self->p_store)[self->index_in] = value;\n\n        --self->free_cnt;\n\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nint CircularBuffer_Get(struct CircularBuffer * self)\n{\n    if (self->free_cnt == self->capacity)\n    {\n        return self->default_value;\n    }\n    else\n    {\n        self->index_out = (self->index_out + 1) % self->capacity;\n\n        ++self->free_cnt;\n        \n        return ((int *)self->p_store)[self->index_out];\n    }\n}\n\nunsigned int CircularBuffer_Capacity(struct CircularBuffer * self)\n{\n    return self->capacity;\n}\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#ifndef CIRCULAR_BUFFER_INCLUDED\n#define CIRCULAR_BUFFER_INCLUDED\n\n#include <stdbool.h>\n\n// You should not change this file. \n// The struct members go only in the .c file\n// You need to implement each function\n\nstruct CircularBuffer;\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value);\nvoid CircularBuffer_Destroy(struct CircularBuffer *);\nbool CircularBuffer_IsEmpty(struct CircularBuffer *);\nbool CircularBuffer_IsFull(struct CircularBuffer *);\nbool CircularBuffer_Put(struct CircularBuffer *, int);\nint CircularBuffer_Get(struct CircularBuffer *);\nunsigned int CircularBuffer_Capacity(struct CircularBuffer *);\n\n#endif\n","CircularBufferTest.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/TestHarness.h\"\n\nextern \"C\"\n{\n    #include \"CircularBuffer.h\"\n}\n\n// Generated some random values for testing.\nstatic const int    m_test_array[] = { -9034, -4022, -9131,  7105,  4946, \n                                        4529, -1297,  2222, -4633, -2000,\n                                       -1703,  8150,  4660, -8671 };\nstatic unsigned int m_val_index    = 0;\n\n/* =======================================================\n   Let's test a circular buffer of capacity zero.\n   The interface specification does not forbid setting\n   capacity to zero, so I decided to allow it. \n   ======================================================= */\nTEST_GROUP(CapacityZero)\n{\n    CircularBuffer     * buff_0      = 0;\n    const unsigned int   cap_0       = 0;\n    const int            empty_val_0 = -14;\n\n    // setup runs before each test\n    void setup()\n    {\n        buff_0 = CircularBuffer_Create(cap_0, empty_val_0);\n    }\n\n    // teardown runs after each test\n    void teardown()\n    {\n        CircularBuffer_Destroy(buff_0);\n    }\n};\n\n// Check if buffer with capacity 0 is created.\nTEST(CapacityZero, test_CAP_0_is_created)\n{\n    LONGS_EQUAL(cap_0, 0);\n    CHECK(buff_0 != 0);\n}\n\n// Check if capacity is reported as 0.\nTEST(CapacityZero, test_CAP_0_capacity)\n{\n    LONGS_EQUAL(cap_0, 0);\n    LONGS_EQUAL(cap_0, CircularBuffer_Capacity(buff_0));\n}\n\n// Check if the buffer is not empty.\nTEST(CapacityZero, test_CAP_0_is_empty)\n{\n    // A circular buffer of capacity 0 is never empty.\n    LONGS_EQUAL(cap_0, 0);\n    LONGS_EQUAL(false, CircularBuffer_IsEmpty(buff_0));\n}\n\n// Check if the buffer is full.\nTEST(CapacityZero, test_CAP_0_is_full)\n{\n    // A circular buffer of capacity 0 is always full.\n    LONGS_EQUAL(cap_0, 0);\n    LONGS_EQUAL(true, CircularBuffer_IsFull(buff_0));\n}\n\n// Check if the buffer with capacity 0 rejects the 1st write.\nTEST(CapacityZero, test_CAP_0_put)\n{\n    // Put shall always fail.\n    LONGS_EQUAL(cap_0, 0);\n    LONGS_EQUAL(false, CircularBuffer_Put(buff_0, m_test_array[2]));\n}\n\n// Check if the empty value is always returned.\nTEST(CapacityZero, test_CAP_0_get)\n{\n    // Get shall always return the default value.\n    LONGS_EQUAL(cap_0, 0);\n    LONGS_EQUAL(empty_val_0, CircularBuffer_Get(buff_0));\n    LONGS_EQUAL(empty_val_0, CircularBuffer_Get(buff_0));\n    LONGS_EQUAL(false, CircularBuffer_Put(buff_0, m_test_array[2]));\n    LONGS_EQUAL(empty_val_0, CircularBuffer_Get(buff_0));\n}\n\n/* =======================================================\n   Let's test a circular buffer of capacity 1. \n   =======================================================*/\nTEST_GROUP(CapacityOne)\n{\n    CircularBuffer     * buff_1      = 0;\n    const unsigned int   cap_1       = 1;\n    const int            empty_val_1 = 23;\n\n    // setup runs before each test\n    void setup()\n    {\n        buff_1 = CircularBuffer_Create(cap_1, empty_val_1);\n    }\n\n    // teardown runs after each test\n    void teardown()\n    {\n        CircularBuffer_Destroy(buff_1);\n    }\n};\n\n// Check if buffer with capacity 1 is created.\nTEST(CapacityOne, test_CAP_1_is_created)\n{\n    LONGS_EQUAL(cap_1, 1);\n    CHECK(buff_1 != 0);\n}\n\n// Check if capacity is reported as 1.\nTEST(CapacityOne, test_CAP_1_capacity)\n{\n    LONGS_EQUAL(cap_1, 1);\n    LONGS_EQUAL(cap_1, CircularBuffer_Capacity(buff_1));\n}\n\n// Check if the buffer is empty before adding a value.\nTEST(CapacityOne, test_CAP_1_is_empty)\n{\n    LONGS_EQUAL(cap_1, 1);\n    LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_1));\n}\n\n// Check if the is not full before adding a value.\nTEST(CapacityOne, test_CAP_1_is_full)\n{\n    LONGS_EQUAL(cap_1, 1);\n    LONGS_EQUAL(false, CircularBuffer_IsFull(buff_1));\n}\n\n// Check if 1 value can be written and read.\nTEST(CapacityOne, test_CAP_1_write_read_single_value)\n{\n    LONGS_EQUAL(cap_1, 1);\n    LONGS_EQUAL(true, CircularBuffer_Put(buff_1, m_test_array[3]));\n    LONGS_EQUAL(true, CircularBuffer_IsFull(buff_1));\n    LONGS_EQUAL(false, CircularBuffer_Put(buff_1, m_test_array[4]));\n    LONGS_EQUAL(false, CircularBuffer_IsEmpty(buff_1));\n\n    LONGS_EQUAL(m_test_array[3], CircularBuffer_Get(buff_1));\n    LONGS_EQUAL(false, CircularBuffer_IsFull(buff_1));\n    LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_1));\n    LONGS_EQUAL(empty_val_1, CircularBuffer_Get(buff_1));\n}\n\n/* =======================================================\n   Let's test a circular buffer of capacity 10. \n   =======================================================*/\nTEST_GROUP(CapacityTen)\n{\n    CircularBuffer     * buff_10      = 0;\n    const unsigned int   cap_10       = 10;\n    const int            empty_val_10 = 879;\n\n    // setup runs before each test\n    void setup()\n    {\n        buff_10 = CircularBuffer_Create(cap_10, empty_val_10);\n    }\n\n    // teardown runs after each test\n    void teardown()\n    {\n        CircularBuffer_Destroy(buff_10);\n    }\n};\n\n// Check if buffer with capacity 10 is created.\nTEST(CapacityTen, test_CAP_10_is_created)\n{\n    LONGS_EQUAL(cap_10, 10);\n    CHECK(buff_10 != 0);\n}\n\n// Check if capacity is reported as 10.\nTEST(CapacityTen, test_CAP_10_capacity)\n{\n    LONGS_EQUAL(cap_10, 10);\n    LONGS_EQUAL(cap_10, CircularBuffer_Capacity(buff_10));\n}\n\n// Check if 1 value can be written and read.\nTEST(CapacityTen, test_CAP_10_write_read_single_value)\n{\n    m_val_index = 5;\n\n    LONGS_EQUAL(cap_10, 10);\n    LONGS_EQUAL(true, CircularBuffer_Put(buff_10, m_test_array[m_val_index]));\n    LONGS_EQUAL(false, CircularBuffer_IsFull(buff_10));\n    LONGS_EQUAL(false, CircularBuffer_IsEmpty(buff_10));\n\n    LONGS_EQUAL(m_test_array[m_val_index], CircularBuffer_Get(buff_10));\n    LONGS_EQUAL(false, CircularBuffer_IsFull(buff_10));\n    LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_10));\n    LONGS_EQUAL(empty_val_10, CircularBuffer_Get(buff_10));\n}\n\n// Check if 7 values can be written and then 7 values can be read.\nTEST(CapacityTen, test_CAP_10_write_then_read_seven_values)\n{\n    unsigned int i = 0;\n    \n    LONGS_EQUAL(cap_10, 10);\n    LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_10));\n\n    for (m_val_index = 1; m_val_index < (1 + 7); ++m_val_index)\n    {\n        LONGS_EQUAL(true, CircularBuffer_Put(buff_10, m_test_array[m_val_index]));\n    }\n\n    LONGS_EQUAL(false, CircularBuffer_IsEmpty(buff_10));\n    LONGS_EQUAL(false, CircularBuffer_IsFull(buff_10));\n\n    for (m_val_index = 1; m_val_index < (1 + 7); ++m_val_index)\n    {\n        LONGS_EQUAL(m_test_array[m_val_index], CircularBuffer_Get(buff_10));\n    }\n\n    LONGS_EQUAL(empty_val_10, CircularBuffer_Get(buff_10));\n    LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_10));\n}\n\n// Check if 7 values can be written and immediately read.\nTEST(CapacityTen, test_CAP_10_write_read_seven_values)\n{\n    unsigned int i = 0;\n    \n    LONGS_EQUAL(cap_10, 10);\n    LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_10));\n\n    for (m_val_index = 1; m_val_index < (1 + 7); ++m_val_index)\n    {\n        LONGS_EQUAL(true, CircularBuffer_Put(buff_10, m_test_array[m_val_index]));\n        LONGS_EQUAL(m_test_array[m_val_index], CircularBuffer_Get(buff_10));\n        LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_10));\n        LONGS_EQUAL(empty_val_10, CircularBuffer_Get(buff_10));\n    }\n\n    LONGS_EQUAL(empty_val_10, CircularBuffer_Get(buff_10));\n    LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_10));\n}\n\n// Check if 10 values can be written and then 10 values can be read.\nTEST(CapacityTen, test_CAP_10_write_then_read_10_values)\n{\n    unsigned int i = 0;\n    \n    LONGS_EQUAL(cap_10, 10);\n    LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_10));\n\n    for (m_val_index = 0; m_val_index < 10; ++m_val_index)\n    {\n        LONGS_EQUAL(true, CircularBuffer_Put(buff_10, m_test_array[m_val_index]));\n    }\n\n    LONGS_EQUAL(false, CircularBuffer_IsEmpty(buff_10));\n    LONGS_EQUAL(true,  CircularBuffer_IsFull(buff_10));\n    LONGS_EQUAL(false, CircularBuffer_Put(buff_10, m_test_array[10]));\n    LONGS_EQUAL(false, CircularBuffer_Put(buff_10, m_test_array[11]));\n\n    for (m_val_index = 0; m_val_index < 10; ++m_val_index)\n    {\n        LONGS_EQUAL(m_test_array[m_val_index], CircularBuffer_Get(buff_10));\n        LONGS_EQUAL(false,  CircularBuffer_IsFull(buff_10));\n\n        if (m_val_index < 9)\n        {\n            LONGS_EQUAL(false, CircularBuffer_IsEmpty(buff_10));\n        }\n    }\n\n    LONGS_EQUAL(empty_val_10, CircularBuffer_Get(buff_10));\n    LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_10));\n}\n\n// - Write  8 values;\n// - Read   3 values;\n// - Write  5 values;\n// - Read  10 values;\nTEST(CapacityTen, test_CAP_10_write_then_read_13_values)\n{\n    unsigned int i = 0;\n    \n    LONGS_EQUAL(cap_10, 10);\n    LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_10));\n\n    for (m_val_index = 0; m_val_index < 8; ++m_val_index)\n    {\n        LONGS_EQUAL(true, CircularBuffer_Put(buff_10, m_test_array[m_val_index]));\n    }\n\n    LONGS_EQUAL(false, CircularBuffer_IsEmpty(buff_10));\n    LONGS_EQUAL(false, CircularBuffer_IsFull(buff_10));\n\n    for (m_val_index = 0; m_val_index < 3; ++m_val_index)\n    {\n        LONGS_EQUAL(m_test_array[m_val_index], CircularBuffer_Get(buff_10));\n        LONGS_EQUAL(false, CircularBuffer_IsFull(buff_10));\n        LONGS_EQUAL(false, CircularBuffer_IsEmpty(buff_10));\n    }\n\n    for (m_val_index = 8; m_val_index < (8 + 5); ++m_val_index)\n    {\n        LONGS_EQUAL(true, CircularBuffer_Put(buff_10, m_test_array[m_val_index]));\n    }\n\n    LONGS_EQUAL(false, CircularBuffer_IsEmpty(buff_10));\n    LONGS_EQUAL(true,  CircularBuffer_IsFull(buff_10));\n    LONGS_EQUAL(false, CircularBuffer_Put(buff_10, m_test_array[10]));\n    LONGS_EQUAL(false, CircularBuffer_Put(buff_10, m_test_array[11]));\n\n    for (m_val_index = 3; m_val_index < 13; ++m_val_index)\n    {\n        LONGS_EQUAL(m_test_array[m_val_index], CircularBuffer_Get(buff_10));\n        \n        if (m_val_index < 12)\n        {\n            LONGS_EQUAL(false, CircularBuffer_IsEmpty(buff_10));\n        }\n    }\n\n    LONGS_EQUAL(empty_val_10, CircularBuffer_Get(buff_10));\n    LONGS_EQUAL(true, CircularBuffer_IsEmpty(buff_10));\n}\n","cyber-dojo.sh":"export CPPUTEST_HOME=/cpputest\nmake\n# make clean\n\n\n","makefile":"#Set this to @ to keep the makefile quiet\nSILENCE = @\n\n#---- Outputs ----#\nCOMPONENT_NAME = CircularBuffer\n\n#--- Inputs ----#\nPROJECT_HOME_DIR = .\n\nSRC_FILES = CircularBuffer.cpp\n\nTEST_SRC_FILES = CircularBufferTest.cpp main.cpp\n\nINCLUDE_DIRS =\\\n  .\\\n  $(CPPUTEST_HOME)/include/ \\\n  $(CPPUTEST_HOME)/include/Platforms/Gcc\\\n\nCPPUTEST_CFLAGS += -std=c99\nCPPUTEST_CXXFLAGS += -std=c++11\nCPPUTEST_CFLAGS += -Wno-unused-parameter\nCPPUTEST_WARNINGFLAGS += -Wall \nCPPUTEST_WARNINGFLAGS += -Werror\nCPPUTEST_WARNINGFLAGS += -Wfatal-errors\nCPPUTEST_WARNINGFLAGS += -Wno-reserved-id-macro\nCPPUTEST_WARNINGFLAGS += -Wno-keyword-macro\nCPPUTEST_WARNINGFLAGS += -Wno-unused-variable\nCPPUTEST_WARNINGFLAGS += -Wno-c++98-compat-pedantic\nCPPUTEST_WARNINGFLAGS += -Wno-reserved-id-macro\ninclude $(CPPUTEST_HOME)/build/MakefileWorker.mk\n","make-gcov.sh":"#!/bin/bash \n\nmake clean\nmake CPPUTEST_USE_GCOV=Y  gcov\n\nfind . -name \"*.cpp.gcov\" | xargs cat\nfind . -name \"*.c.gcov\"| xargs cat\n\nmake clean\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nI may email you about your exercise and what I discover.\n\nYou should consider your code public, I may respectively\ninclude it in tweets or blog articles. I will not reveal \nyour name, unless you want me too.  If you choose to tweet\nabout the exercise, please tag me @jwgrenning.\n\nAbout you\n---------\nPlease add some information about yourself when you start the\nexercise. Pressing the 'test' button saves all your edits.\n\nWhat is your level of C experience (delete choices that are not you)?\n- I program in C everyday.\n\nPlease say something about your engineering/programming background:\n- For the past 5 years I have been developing applications for ARM Cortex-M microcontrollers.\n\nPUSH THE TEST BUTTON NOW TO SAVE YOUR WORK AND\nRECORD THE START TIME OF YOUR EXERCISE.\n\nIf you take some breaks during the exercise, please add\nthe time and durattion of your break here.\n\nWill you do (please delete all but one choice):\n- test-driven\n- test-first\n- test-after\n- test-when-i-feel-like-it \n\nObjective\n---------\nWrite a CircularBuffer and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * preserves prior values\n  * returns false\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n* When you are finished, your production code should \n  run without printing anything.\n* Make your code clean and readble, something you'd\n  attach to your resume.\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc or calloc failures\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\n\nWrite and test CircularBuffer.  Use the provided CircularBufferTest.cpp\nto exercise your CircularBuffer.  Add as many test cases \nas you need.\n\nPlease do all your work in this cyber-dojo environment.\n\nIf you take any breaks, please let me know the approximate \ncycle number (upper right side of the red, green and \nyellow traffic lights) and duration.\n\nNOTE: In the main file, that there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are going to start testing, set the variable to\n'testing'. Once you are satisfied that your code works, set it \nto 'working'.  If you are test-driving, there is a setting for you\ntoo.\n\nEmail the URL of your exercises to 'research -at- wingman-sw.com'\nwhen you have completed your CircularBuffer.\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to make clean.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","output":"compiling CircularBufferTest.cpp\nLinking CircularBuffer_tests\nRunning CircularBuffer_tests\n...............\nCircularBufferTest.cpp:59: error: Failure in TEST(CapacityZero, test_CAP_0_is_empty)\n\tLONGS_EQUAL(false, CircularBuffer_IsEmpty(buff_0)) failed\n\texpected <0 (0x0)>\n\tbut was  <1 (0x1)>\n\n...\nErrors (1 failures, 18 tests, 18 ran, 194 checks, 0 ignored, 0 filtered out, 4 ms)\n\nI'm test-driving.\n/cpputest/build/MakefileWorker.mk:451: recipe for target 'all' failed\nmake: *** [all] Error 1\n"}