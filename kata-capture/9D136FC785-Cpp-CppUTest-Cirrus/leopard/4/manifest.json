{"main.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include <iostream>\n#include \"CppUTest/CommandLineTestRunner.h\"\n\n // please do not change these messages, enable one at a time\nstatic const char * writing = \"I'm writing and building.\";\nstatic const char * testing = \"[  FAILED  ] Testing, with more to do.\";\nstatic const char * working = \"[  PASSED  ] I'm done testing and my code works!\";\nstatic const char * test_driving = \"I'm test-driving.\";\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    const char * exercise_state = writing;\n\n    int result = RUN_ALL_TESTS(ac, av);\n\n    std::cout << exercise_state << std::endl;\n\n    return result;\n}\n\n","CircularBuffer.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CircularBuffer.h\"\n\nCircularBuffer::CircularBuffer(const unsigned int capacity, const int defaultValue) :\n_capacity(capacity),\n_defaultValue(defaultValue),\n_numStoredValues(0),\n_firstIndex(0)\n{\n    _buffer = (int*)malloc(_capacity * sizeof(int));\n}\n\nCircularBuffer::~CircularBuffer()\n{\n    free(_buffer)\n}\n\nbool CircularBuffer::isEmpty() const\n{\n    return _numStoredValues == 0;\n}\n\nbool CircularBuffer::isFull() const\n{\n    return _capacity == _numStoredValues;\n}\n\nbool CircularBuffer::put(int v)\n{\n    if (isFull())\n        return false;\n    \n    _buffer[(_firstIndex + _numStoredValues) % _capacity] = v;\n    _numStoredValues++;\n    \n    return true;\n}\n\nint CircularBuffer::get()\n{\n    if (_numStoredValues == 0)\n        return _defaultValue;\n    \n    int v = _buffer[_firstIndex];\n    \n    _firstIndex++;\n    if (_firstIndex >= _capacity)\n        _firstIndex = 0;\n    \n    _numStoredValues--;\n    \n    return v;\n}\n\nint CircularBuffer::capacity() const\n{\n    return _capacity;\n}\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#ifndef D_CircularBuffer_H\n#define D_CircularBuffer_H\n\n#include <string>\n\nclass CircularBuffer\n{\n  public:\n    CircularBuffer(const unsigned int capacity, const int defaultValue);\n    virtual ~CircularBuffer();\n\n    bool isEmpty() const;\n    bool isFull() const;\n    bool put(int);\n    int get();\n    int capacity() const;\n\n  private:\n    \n    const unsigned int _capacity;\n    const int _defaultValue;\n    \n    unsigned int _numStoredValues;\n    int* _buffer;\n    unsigned int _firstIndex;\n\n    CircularBuffer(const CircularBuffer&);\n    CircularBuffer& operator=(const CircularBuffer&);\n};\n\nclass CircularBufferException\n{\n    public:\n        CircularBufferException(std::string message)\n        : message_(message){}\n\n        std::string message(){return message_;}\n\n    private:\n        std::string message_;\n\n};\n\n#endif  // D_CircularBuffer_H\n","CircularBufferTest.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/TestHarness.h\"\n#include \"CircularBuffer.h\"\n\n// Everything in the test group is available\n// to associated test cases\nTEST_GROUP(CircularBuffer)\n{\n    CircularBuffer* buffer = 0;\n    const unsigned int capacity = 10;\n    const int emptyValue = -1;\n\n    // setup runs before each test\n    void setup()\n    {\n        buffer = new CircularBuffer(capacity, emptyValue);\n    }\n\n    // teardown runs after each test\n    void teardown()\n    {\n        delete buffer;\n    }\n\n};\n\n// PUSH THE TEST BUTTON WHEN YOU START TO WORK\n// Pushing the test button saves your work and runs the build.\n\n// each test gets a fresh CurcularBuffer\nTEST(CircularBuffer, create_destroy)\n{\n    LONGS_EQUAL(buffer->capacity(), capacity);\n    CHECK_TRUE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n    LONGS_EQUAL(buffer->get(), emptyValue);\n}\n\nTEST(CircularBuffer, put_get)\n{\n    CHECK_TRUE(buffer->put(1));\n    CHECK_FALSE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n    \n    LONGS_EQUAL(buffer->get(), 1);\n    CHECK_TRUE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n\n    LONGS_EQUAL(buffer->get(), emptyValue);\n}\n\nTEST(CircularBuffer, put_get_multiple)\n{\n    CHECK_TRUE(buffer->put(1));\n    CHECK_TRUE(buffer->put(2));\n    CHECK_FALSE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n    \n    LONGS_EQUAL(buffer->get(), 1);\n    CHECK_FALSE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n    \n    LONGS_EQUAL(buffer->get(), 2);\n    CHECK_TRUE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n\n    LONGS_EQUAL(buffer->get(), emptyValue);\n}\n\nTEST(CircularBuffer, full)\n{\n    for (int i = 1; i < capacity; i++) {\n        CHECK_TRUE(buffer->put(i));\n        CHECK_FALSE(buffer->isEmpty());\n        CHECK_FALSE(buffer->isFull());\n    }\n    CHECK_TRUE(buffer->put(capacity));\n    CHECK_FALSE(buffer->isEmpty());\n    CHECK_TRUE(buffer->isFull());\n\n    CHECK_FALSE(buffer->put(capacity + 1));\n    CHECK_FALSE(buffer->isEmpty());\n    CHECK_TRUE(buffer->isFull());\n    \n    for (int i = 1; i < capacity; i++) {\n        LONGS_EQUAL(buffer->get(), i);\n        CHECK_FALSE(buffer->isEmpty());\n        CHECK_FALSE(buffer->isFull());\n    }\n    \n    LONGS_EQUAL(buffer->get(), capacity);\n    CHECK_TRUE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n\n    LONGS_EQUAL(buffer->get(), emptyValue);\n}\n\nTEST(CircularBuffer, put_get_interleave)\n{\n    CHECK_TRUE(buffer->put(1));\n    CHECK_TRUE(buffer->put(2));\n    CHECK_FALSE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n    \n    LONGS_EQUAL(buffer->get(), 1);\n    CHECK_FALSE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n\n    CHECK_TRUE(buffer->put(3));\n    CHECK_FALSE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n    \n    LONGS_EQUAL(buffer->get(), 2);\n    CHECK_FALSE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n    \n    LONGS_EQUAL(buffer->get(), 3);\n    CHECK_TRUE(buffer->isEmpty());\n    CHECK_FALSE(buffer->isFull());\n\n    LONGS_EQUAL(buffer->get(), emptyValue);\n}\n\n// Each test in a group must have a unique name\n// Make as many tests as you like\nTEST(CircularBuffer, test_with_all_the_macros_you_should_need_for_this_exercise)\n{\n    LONGS_EQUAL(capacity, 10);\n    LONGS_EQUAL(emptyValue, -1);\n    CHECK(buffer != 0);\n    CHECK(true);\n    CHECK_TRUE(true);\n    CHECK_FALSE(false);\n    // If you are not used to a xUnit style of test harness,\n    // please do the other exercise offered in the invitation.\n    // find more about CppUTest at cpputest.org\n}\n","cyber-dojo.sh":"export CPPUTEST_HOME=/cpputest\nmake\n# make clean\n\n\n","makefile":"#Set this to @ to keep the makefile quiet\nSILENCE = @\n\n#---- Outputs ----#\nCOMPONENT_NAME = CircularBuffer\n\n#--- Inputs ----#\nPROJECT_HOME_DIR = .\n\nSRC_FILES = CircularBuffer.cpp\n\nTEST_SRC_FILES = CircularBufferTest.cpp main.cpp\n\nINCLUDE_DIRS =\\\n  .\\\n  $(CPPUTEST_HOME)/include/ \\\n  $(CPPUTEST_HOME)/include/Platforms/Gcc\\\n\nCPPUTEST_CFLAGS += -std=c99\nCPPUTEST_CXXFLAGS += -std=c++11\nCPPUTEST_WARNINGFLAGS += -Wall \nCPPUTEST_WARNINGFLAGS += -Werror\nCPPUTEST_WARNINGFLAGS += -Wfatal-errors\nCPPUTEST_WARNINGFLAGS += -Wno-reserved-id-macro\nCPPUTEST_WARNINGFLAGS += -Wno-keyword-macro\nCPPUTEST_WARNINGFLAGS += -Wno-unused-variable\nCPPUTEST_WARNINGFLAGS += -Wno-c++98-compat-pedantic\nCPPUTEST_WARNINGFLAGS += -Wno-reserved-id-macro\nCPPUTEST_WARNINGFLAGS += -Wno-unused-parameter\nCPPUTEST_MEMLEAK_DETECTOR_NEW_MACRO_FILE = -include ./MyMemoryLeakDetectorNewMacrosFile.h\n\ninclude $(CPPUTEST_HOME)/build/MakefileWorker.mk\n","make-gcov.sh":"#!/bin/bash \n\nmake clean\nmake CPPUTEST_USE_GCOV=Y  gcov\n\nfind . -name \"*.cpp.gcov\" | xargs cat\nfind . -name \"*.c.gcov\"| xargs cat\n\nmake clean\n","MyMemoryLeakDetectorNewMacrosFile.h":"// Including needed standard library headers here\n// prevents conflicts with the CppUTest memory leak detection. \n#include <iostream>\n#include \"CppUTest/MemoryLeakDetectorNewMacros.h\"\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nEmail research -at- wingman-sw.com with questions or suggestions.  \n\nI may email you about your exercise and what I discover.\n\nYou should consider your code public, I may respectively\ninclude it in tweets or blog articles. I will not reveal \nyour name, unless you want me too.  If you choose to tweet\nabout the exercise, please tag me @jwgrenning.\n\nAbout you\n---------\nPlease add some information about yourself when you start the\nexercise. Pressing the 'test' button saves all your edits.\n\nWhat is your level of C++ experience (delete choices that are not you)?\n- I program in C++ everyday\n- I have programmed in C++ recently\n- I have programmed in C++, but not recently\n- I programmed in C++ long long ago\n- I never programmed in C++\n\nPlease say something about your engineering/programming background:\n\nPUSH THE TEST BUTTON NOW TO SAVE YOUR WORK AND\nRECORD THE START TIME OF YOUR EXERCISE.\n\nIf you take some breaks during the exercise, please add\nthe time and durattion of your break here.\n\nWill you do (please delete all but one choice):\n- test-driven\n- test-first\n- test-after\n- test-when-i-feel-like-it \n\nObjective\n---------\nWrite a CircularBuffer and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * preserves prior values\n  * returns false\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n* When you are finished, your production code should \n  run without printing anything.\n* Make your code clean and readble, something you'd\n  attach to your resume.\n\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc, calloc, new failures\n* constructor/destructor failure\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\n\nWrite and test CircularBuffer.  Use the provided CircularBufferTest.cpp\nto exercise your CircularBuffer.  Add as many test cases \nas you need.\n\nPlease do all your work in this cyber-dojo environment.\n\nIf you take any breaks, please let me know the approximate \ncycle number (upper right side of the red, green and \nyellow traffic lights) and duration.\n\nNOTE: In the main file, that there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are going to start testing, set the variable to\n'testing'. Once you are satisfied that your code works, set it \nto 'working'.  If you are test-driving, there is a setting for you\ntoo.\n\nEmail the URL of your exercises to 'research -at- wingman-sw.com'\nwhen you have completed your CircularBuffer.\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to make clean.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","output":"compiling CircularBufferTest.cpp\n/cpputest/build/MakefileWorker.mk:502: recipe for target 'objs/CircularBufferTest.o' failed\nCircularBufferTest.cpp: In member function 'virtual void TEST_CircularBuffer_full_Test::testBody()':\nCircularBufferTest.cpp:73:23: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]\n     for (int i = 1; i < capacity; i++) {\n                     ~~^~~~~~~~~~\ncompilation terminated due to -Wfatal-errors.\ncc1plus: all warnings being treated as errors\nmake: *** [objs/CircularBufferTest.o] Error 1\n"}