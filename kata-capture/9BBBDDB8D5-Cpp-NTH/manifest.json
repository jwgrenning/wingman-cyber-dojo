{"runner_choice":"stateful","highlight_filenames":["main.cpp","CircularBuffer.cpp","CircularBuffer.h","instructions"],"display_name":"C++ no test harness, CircularBuffer","image_name":"cyberdojofoundation/gcc_googletest","visible_files":{"main.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CircularBuffer.h\"\n#include <iostream>\n\n//please do not change these messages\nstatic const char * writing = \"I'm writing and building.\";\nstatic const char * testing = \"[  FAILED  ] Testing, with more to do.\";\nstatic const char * working = \"[  PASSED  ] I'm done testing and my code works!.\";\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    const char * exercise_state = writing;\n\n    unsigned int capacity = 10;\n    int empty_value = -1;\n\n    CircularBuffer buffer(capacity, empty_value);\n\n    std::cout << exercise_state << std::endl;\n    \n    return 0;\n}\n\n","CircularBuffer.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\r\n\r\n#include \"CircularBuffer.h\"\r\n\r\nCircularBuffer::CircularBuffer(int capacity, int default_value)\r\n{\r\n}\r\n\r\nCircularBuffer::~CircularBuffer()\r\n{\r\n}\r\n\r\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\r\n\r\n#ifndef D_CircularBuffer_H\r\n#define D_CircularBuffer_H\r\n\r\n#include <string>\r\n\r\nclass CircularBuffer\r\n{\r\n  public:\r\n    CircularBuffer(int capacity, int default_value);\r\n    virtual ~CircularBuffer();\r\n\r\n    bool isEmpty() const;\r\n    bool isFull() const;\r\n    void put(int);\r\n    int get();\r\n    int capacity() const;\r\n\r\n  private:\r\n\r\n    CircularBuffer(const CircularBuffer&);\r\n    CircularBuffer& operator=(const CircularBuffer&);\r\n};\r\n\r\n#endif  // D_CircularBuffer_H\r\n","cyber-dojo.sh":"export CPPUTEST_HOME=/cpputest\nmake\n# make clean\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nEmail research -at- wingman-sw.com with questions or suggestions.  \n\nI may email you about your exercise and what I discover.\n\nYou should consider your code public, I may respectively\ninclude it in tweets or blog articles. I will not reveal \nyour name, unless you want me too.  If you choose to tweet\nabout the exercise, please tag me @jwgrenning.\n\nAbout you\n---------\nPlease add some information about yourself when you start the\nexercise. Pressing the 'test' button saves all your edits.\n\nWhat is your level of C++ experience (delete choices that are not you)?\n- I program in C++ everyday\n- I have programmed in C++ recently\n- I have programmed in C++, but not recently\n- I programmed in C++ long long ago\n- I never programmed in C++\n\nPlease say something about your engineering/programming background:\n\nPUSH THE TEST BUTTON NOW TO SAVE YOUR WORK AND\nRECORD THE START TIME OF YOUR EXERCISE.\n\nIf you take some breaks during the exercise, please add\nthe time and durattion of your break here.\n\nObjective\n---------\nWrite a CircularBuffer and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * preserves prior values\n  * returns false\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n* When you are finished, your production code should \n  run without printing anything; your test code can\n  print what ever you need.\n* Make your code clean and readble, something you'd\n  attach to your resume.\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc, calloc, or new failures\n* constructor/destructor failure\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\nPress 'test' early and often.\n\nWrite and test CircularBuffer. Use the provided main.c \nto exercise your CircularBuffer.  Feel free to use printf,\ncout, assert or whatever you would normally do. \n\nPlease do all your work in this cyber-dojo environment.\n\nNOTE: In the main file, that there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are testing, set the variable to 'testing'.\nOnce you are satisfied that your code works, set it \nto 'working'. \n\nEmail the URL of your exercise to 'research -at- wingman-sw.com' \nwhen you have completed your CircularBuffer.  Tell your friends!\n\nIf you take any breaks, please let me know the approximate \ncycle number (upper right side of the red, green and \nyellow traffic lights) and duration.\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to 'make clean'.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","make-gcov.sh":"#!/bin/bash \n\nmake clean\nmake CPPUTEST_USE_GCOV=Y  gcov\n\nfind . -name \"*.cpp.gcov\" | xargs cat\nfind . -name \"*.c.gcov\"| xargs cat\n\nmake clean\n","makefile":"TARGET = CircularBuffer_tests\nCC = g++\nCFLAGS = -Wall\n\n.PHONY: default all clean\n\ndefault: $(TARGET)\nall: default\n\nOBJECTS = $(patsubst %.cpp, %.o, $(wildcard *.cpp))\nHEADERS = $(wildcard *.h)\n\n%.o: %.c $(HEADERS)\n\t$(CC) $(CFLAGS) -c $< -o $@\n\n.PRECIOUS: $(TARGET) $(OBJECTS)\n\n$(TARGET): $(OBJECTS)\n\t$(CC) $(OBJECTS) -Wall $(LIBS) -o $@\n\t./$(TARGET)\n\nclean:\n\t-rm -f *.o\n\t-rm -f $(TARGET)\n","output":""},"id":"9BBBDDB8D5","created":[2018,2,10,13,34,12]}