{"main.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include <stdio.h>\n#include \"CircularBuffer.h\"\n\n//please do not change these messages\nconst char * writing = \"I'm writing and building.\";\nconst char * testing = \"[  FAILED  ] Testing, with more to do.\";\nconst char * working = \"[  PASSED  ] I'm done testing and my code works!.\";\n\n#define CHECK(TEST) check(__LINE__, #TEST, (TEST))\n\nvoid check(int line, const char* test, bool result)\n{\n    if (!result) {\n        printf(\"ERROR (%d) - (%s) is false\\n\", line, test);\n    } else {\n        printf(\"OK (%d) - (%s)\\n\", line, test);\n    }\n}\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    const char * exercise_state = testing;\n\n    unsigned int capacity = 10;\n    int empty_value = -1;\n\n    struct CircularBuffer * b = CircularBuffer_Create(capacity, empty_value);\n    CHECK(b != NULL);\n    CHECK(CircularBuffer_IsEmpty(b));\n    CHECK(!CircularBuffer_IsFull(b));\n    CHECK(CircularBuffer_Capacity(b) == 10);\n    CircularBuffer_Destroy(b);\n\n    printf(\"%s\\n\", exercise_state);\n    return 0;\n}\n\n","CircularBuffer.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CircularBuffer.h\"\n#include <stdlib.h>\n\nstruct CircularBuffer\n{\n    unsigned int write_idx;\n    unsigned int read_idx;\n    unsigned int capacity;\n    int default_value;\n    int buffer[];\n};\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, \n                                              int default_value)\n{\n    struct CircularBuffer * self = (struct CircularBuffer *)malloc(sizeof(struct CircularBuffer) + capacity * sizeof(int));\n    self->write_idx = 0;\n    self->read_idx = 0;\n    self->capacity = capacity;\n    self->default_value = default_value;\n    return self;\n}\n\nvoid CircularBuffer_Destroy(struct CircularBuffer * self)\n{\n    free(self);\n}\n\nbool CircularBuffer_IsEmpty(struct CircularBuffer * self) \n{\n    return self->write_idx == self->read_idx;\n}\n\nstatic unsigned int next_idx(struct CircularBuffer * self, \n                             unsigned int idx) \n{\n    ++idx;\n    if (idx != self->capacity) {\n        return idx;\n    } else {\n        return 0;\n    }\n}\n\nbool CircularBuffer_IsFull(struct CircularBuffer * self) \n{\n    return next_idx(self, self->read_idx) == self->write_idx;\n}\n\nbool CircularBuffer_Put(struct CircularBuffer * self, \n                        int value)\n{\n    if (!CircularBuffer_IsFull(self)) {\n        self->buffer[self->write_idx] = value;\n        self->write_idx = next_idx(self, self->write_idx);\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint CircularBuffer_Get(struct CircularBuffer * self) \n{\n    if (!CircularBuffer_IsEmpty(self)) {\n        int value = self->buffer[self->read_idx];\n        self->read_idx = next_idx(self, self->read_idx);\n        return value;\n    } else {\n        return self->default_value;\n    }\n}\n\nunsigned int CircularBuffer_Capacity(struct CircularBuffer * self) \n{\n    return self->capacity;\n}\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#ifndef CIRCULAR_BUFFER_INCLUDED\n#define CIRCULAR_BUFFER_INCLUDED\n\n#include <stdbool.h>\n\nstruct CircularBuffer;\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value);\nvoid CircularBuffer_Destroy(struct CircularBuffer *);\nbool CircularBuffer_IsEmpty(struct CircularBuffer *);\nbool CircularBuffer_IsFull(struct CircularBuffer *);\nbool CircularBuffer_Put(struct CircularBuffer *, int);\nint CircularBuffer_Get(struct CircularBuffer *);\nunsigned int CircularBuffer_Capacity(struct CircularBuffer *);\n\n#endif\n","cyber-dojo.sh":"make\n# make clean\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nEmail research -at- wingman-sw.com with questions or suggestions.  \n\nAbout you\n---------\nPlease add some information about youself when you start the\nexercise. Pressing the 'test' button saves all\nyour edits.  I won't spam you, but may email you about \nyour exercise and what I discover.  I will not reveal your \nname, unless you want me too.  If you choose to tweet about\nthe exercise, please tag me @jwgrenning.\n\nName: \nEmail: \nYour level of C experience (delete choices that are not you):\n- I program in C everyday\n- I have programmed in C recently\n- I have programmed in C, but not recently\n- I programmed in C long long ago\n- I never programmed in C\nPlease say something about your engineering/programming background:\n\n\nObjective\n---------\nWrite a CircularBuffer module in c and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * returns false\n  * loses no prior values\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc or calloc failures\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\n\nWrite CircularBuffer.c.  Once it compiles, test that the\nCircularBuffer is working.  Use the provided main.c to exercise\nyour CircularBuffer.  Feel free to use printf or whatever you\nwould normally do.  Do not use any unit test framework.\nPlease do all your work in this cyber-dojo environment.\n\nNOTE: In main.c that there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are going to start testing, set the variable to\n'testing'. Once you are satisfied that your code works, set it \nto 'working'. \n\nEmail research -at- wingman-sw.com when you have completed your\nCircularBuffer.  Tell your friends!\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run main.c by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to make clean.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","makefile":"TARGET = CircularBufferTest\nCC = gcc\nCFLAGS = -Wall\n\n.PHONY: default all clean\n\ndefault: $(TARGET)\nall: default\n\nOBJECTS = $(patsubst %.c, %.o, $(wildcard *.c))\nHEADERS = $(wildcard *.h)\n\n%.o: %.c $(HEADERS)\n\t$(CC) $(CFLAGS) -c $< -o $@\n\n.PRECIOUS: $(TARGET) $(OBJECTS)\n\n$(TARGET): $(OBJECTS)\n\t$(CC) $(OBJECTS) -Wall $(LIBS) -o $@\n\t./$(TARGET)\n\nclean:\n\t-rm -f *.o\n\t-rm -f $(TARGET)\n","output":"gcc -Wall -c main.c -o main.o\ngcc  CircularBuffer.o  main.o -Wall  -o CircularBufferTest\n./CircularBufferTest\nOK (31) - (b != NULL)\nOK (32) - (CircularBuffer_IsEmpty(b))\nOK (33) - (!CircularBuffer_IsFull(b))\nOK (34) - (CircularBuffer_Capacity(b) == 10)\n[  FAILED  ] Testing, with more to do.\n"}