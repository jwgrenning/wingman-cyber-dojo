{"AllTests.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/CommandLineTestRunner.h\"\n#include <stdio.h>\n\n//please do not change these messages\nconst char * writing = \"I'm writing and building.\";\nconst char * testing = \"[  FAILED  ] Testing, with more to do.\";\nconst char * working = \"[  PASSED  ] I'm done testing and my code works!\";\nconst char * test_driving = \"I'm test-driving.\";\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    const char * exercise_state = writing;\n\n    int result = RUN_ALL_TESTS(ac, av);\n\n    printf(\"%s\\n\", exercise_state);\n\n    return result;\n}\n\n","CircularBuffer.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CircularBuffer.h\"\n#include <assert.h>\n\nstruct CircularBufferStruct\n{\n    int             default_value;\n    unsigned int    capacity;\n    int             * read, * write, * data;\n};\n\nstatic int * advance_pointer(CircularBuffer * self, int * p)\n{\n    // Increment and wrap if necessary\n    if (++p > (self -> data + (self -> capacity)))\n    {\n        p = self -> data;\n    }\n    \n    return p;\n}\n\nCircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value)\n{\n    // Allocate the structure and set it up\n    CircularBuffer * self = (CircularBuffer *)calloc(1, sizeof(CircularBuffer));\n    assert(self);   // Sorry, must have this.  It's essential (to me) if we're not dealing with null values elsewhere\n    self -> capacity = capacity;\n    self -> default_value = default_value;\n    \n    // Allocate the data store and set it up\n    \n    // Allocate one extra for easy full/empty detection.  For\n    // a circular buffer of objects bigger than an 'int' this uses\n    // space in the name of efficiency (the other way to do it\n    // is to use a separate \"I'm full\" flag).\n    self -> data = (int *)calloc(capacity + 1, sizeof(int));\n    assert(self);   // yes, yes \"assume calloc always returns\"\n    self -> read = self -> data;\n    self -> write = self -> data;\n    \n    return self;\n}\n\nvoid CircularBuffer_Destroy(CircularBuffer * self)\n{\n    // TODO: Note the blithe assumption of data integrity here\n    free(self -> data);\n    free(self);\n}\n\nunsigned int CircularBuffer_Capacity(CircularBuffer * self)\n{\n    return self -> capacity;\n}\n\nint CircularBuffer_Read(CircularBuffer * self)\n{\n    if (CircularBuffer_Empty(self))\n    {\n        return self -> default_value;\n    }\n    else\n    {\n        self -> read = advance_pointer(self, self -> read);\n        return *(self -> read);\n    }\n}\n\nint CircularBuffer_Write(CircularBuffer * self, int data)\n{\n    if (CircularBuffer_Full(self))\n    {\n        return 0;\n    }\n    else\n    {\n        self -> write = advance_pointer(self, self -> write);\n        *(self -> write) = data;\n        return 1;\n    }\n}\n\nint CircularBuffer_Empty(CircularBuffer * self)\n{\n    return (self -> read == self -> write) ? 1 : 0;\n}\n\nint CircularBuffer_Full(CircularBuffer * self)\n{\n    if (advance_pointer(self, self -> write) == self -> read)\n    {\n        return 1;\n    }\n    else\n    {\n        return 0;\n    }\n}\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#ifndef CIRCULAR_BUFFER_INCLUDED\n#define CIRCULAR_BUFFER_INCLUDED\n\ntypedef struct CircularBufferStruct CircularBuffer;\n\n/*! Buffer creation\n *  /param capacity, the number of integers to store\n *  /param default_value, the value to return from a read of an empty buffer\n *  /return a pointer to the created buffer\n */\nCircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value);\n\n/*! Buffer destruction\n * /param buff, the buffer to destroy\n */\nvoid CircularBuffer_Destroy(CircularBuffer * buff);\n\n/// /return the total capacity of the buffer\nunsigned int    CircularBuffer_Capacity(CircularBuffer *);\n\n/*! Perform a read operation: read an integer and remove it\n *  from the buffer\n *  /return the integer read\n */\nint             CircularBuffer_Read(CircularBuffer *);\n\n// (there should be a peek in here, but the system engineer\n// didn't ask, and I'm lazy)\n\n/*! Perform a write operation: write an integer into the buffer\n *  from the buffer\n *  /return 1 if write was successful, 0 if not\n */\nint             CircularBuffer_Write(CircularBuffer *, int data);\n\n/// /return 1 if the buffer is empty, 0 if not\nint             CircularBuffer_Empty(CircularBuffer *);\n\n/// /return 1 if the buffer is full, 0 if not\nint             CircularBuffer_Full(CircularBuffer *);\n#endif\n","CircularBufferTest.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/TestHarness.h\"\n\n// (From James:)\n// These are all the macros you will need.\n//    LONGS_EQUAL(0, 1); // will fail\n//    CHECK_TRUE(false); // will fail\n//    CHECK_FALSE(true); // will fail\n\nextern \"C\"\n{\n#include \"CircularBuffer.h\"\n}\n\n// Everything in the test group is available\n// to associated test cases\nTEST_GROUP(CircularBuffer)\n{\n    CircularBuffer * buffer;\n    unsigned int capacity = 10;\n    int empty_value = -1;\n\n    // setup runs before each test\n    void setup()\n    {\n        buffer = CircularBuffer_Create(capacity, empty_value);\n    }\n\n    // teardown runs after each test\n    void teardown()\n    {\n        CircularBuffer_Destroy(buffer);\n    }\n};\n\n// each test gets a fresh CurcularBuffer\nTEST(CircularBuffer, create_destroy)\n{\n    // The newly-created thingie should have the right capacity\n    LONGS_EQUAL(capacity, CircularBuffer_Capacity(buffer));\n    \n    // A freshly-created buffer should be empty, not full\n    LONGS_EQUAL(empty_value, CircularBuffer_Read(buffer));\n    CHECK_TRUE(CircularBuffer_Empty(buffer));\n    CHECK_FALSE(CircularBuffer_Full(buffer));\n    \n    // Check with a different capacity:\n    static CircularBuffer       * other_buffer;\n    static const unsigned int   other_capacity = 42;\n    other_buffer = CircularBuffer_Create(other_capacity, 42);\n    LONGS_EQUAL(other_capacity, CircularBuffer_Capacity(other_buffer));\n    LONGS_EQUAL(42, CircularBuffer_Read(other_buffer));\n    CircularBuffer_Destroy(other_buffer);\n}\n\nTEST(CircularBuffer, read_write_1)\n{\n    CircularBuffer_Write(buffer, 42);\n    CHECK_FALSE(CircularBuffer_Empty(buffer));\n    CHECK_FALSE(CircularBuffer_Full(buffer));\n    LONGS_EQUAL(42, CircularBuffer_Read(buffer));\n    LONGS_EQUAL(empty_value, CircularBuffer_Read(buffer));\n}\n\nTEST(CircularBuffer, read_write_tail_chase)\n{\n    // Chase the read/write around the buffer\n    for (unsigned int n = 0; n < 3 * capacity; ++n)\n    {\n        CircularBuffer_Write(buffer, n);\n        CHECK_FALSE(CircularBuffer_Empty(buffer));\n        CHECK_FALSE(CircularBuffer_Full(buffer));\n        LONGS_EQUAL(n, CircularBuffer_Read(buffer));\n    }\n    \n    LONGS_EQUAL(empty_value, CircularBuffer_Read(buffer));\n}\n\nTEST(CircularBuffer, read_write_fill_empty)\n{\n    // Fill and then empty the buffer\n    for (unsigned int n = 0; n < 3 * capacity; ++n)\n    {\n        CircularBuffer_Write(buffer, n);\n        if (CircularBuffer_Full(buffer))\n        {\n            // Buffer should be full of 0, 1, ...\n            // and n should equal capacity - 1\n            LONGS_EQUAL(capacity - 1, n);\n            \n            // Read out exactly capacity words\n            for (unsigned int m = 0; m < capacity; ++m)\n            {\n                LONGS_EQUAL(n, CircularBuffer_Read(buffer));\n            }\n        }\n    }\n    \n    LONGS_EQUAL(empty_value, CircularBuffer_Read(buffer));\n    CHECK_FALSE(CircularBuffer_Empty(buffer));\n}","cyber-dojo.sh":"export CPPUTEST_HOME=/cpputest\n\nmake\n\n\n","makefile":"#Set this to @ to keep the makefile quiet\nSILENCE = @\n\n#---- Outputs ----#\nCOMPONENT_NAME = CircularBuffer\n\n#--- Inputs ----#\nPROJECT_HOME_DIR = .\n\nSRC_FILES = CircularBuffer.c\n\nTEST_SRC_FILES = CircularBufferTest.cpp AllTests.cpp\n\nINCLUDE_DIRS =\\\n  .\\\n  $(CPPUTEST_HOME)/include/ \\\n  $(CPPUTEST_HOME)/include/Platforms/Gcc\\\n\nCPPUTEST_WARNINGFLAGS += -Wall \nCPPUTEST_WARNINGFLAGS += -Werror\nCPPUTEST_WARNINGFLAGS += -Wswitch-default\nCPPUTEST_WARNINGFLAGS += -Wfatal-errors\nCPPUTEST_CXXFLAGS +=  -std=c++0x\nCPPUTEST_CFLAGS += -std=c99\nCPPUTEST_CFLAGS += -Wno-unused-parameter\nCPPUTEST_CXXFLAGS += $(CPPUTEST_PLATFORM_CXXFLAGS)\n\ninclude $(CPPUTEST_HOME)/build/MakefileWorker.mk\n","make-gcov.sh":"#!/bin/bash \n\nmake clean\nmake CPPUTEST_USE_GCOV=Y  gcov\n\nfind . -name \"*.cpp.gcov\" | xargs cat\nfind . -name \"*.c.gcov\"| xargs cat\n\nmake clean\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nEmail research -at- wingman-sw.com with questions or suggestions.  \n\nAbout you\n---------\nPlease add some information about youself when you start the\nexercise. Pressing the 'test' button saves all\nyour edits.  I won't spam you, but may email you about \nyour exercise and what I discover.  I will not reveal your \nname, unless you want me too.  If you choose to tweet about\nthe exercise, please tag me @jwgrenning.\n\nName: Tim Wescott\n\nPlease do feel free to use my name.\n\nEmail: tim@wescottdesign.com\nYour level of C experience (delete choices that are not you):\n- I program in C++ everyday, have programmed in C extensively,\n  and a whole lot of the C++ I program in looks a whole lot\n  like C.\n\nWill you do (please delete all but one choice):\n- test-driven\n\nPlease say something about your engineering/programming experience:\n\nI'm an engineer with over 25 years' experience in software, \nhardware, and system design.  Historically I've mostly worked in\ncommunications, dynamic system control (i.e., motion, thermal,\netc., control); I'm currently doing \"pure software\" at a big-box\nembedded company.\n\n\nObjective\n---------\nWrite a CircularBuffer module in c and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * returns false\n  * loses no prior values\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc or calloc failures\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\n\nWrite CircularBuffer.c.  Once it compiles, test that the\nCircularBuffer is working.  Use the provided main.c to exercise\nyour CircularBuffer.\n\nPlease do all your work in this cyber-dojo environment.\n\nNOTE: In AllTests.cpp, there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are going to start testing, set the variable to\n'testing'. Once you are satisfied that your code works, set it \nto 'working'.  If you are test-driving, there is a setting for you\ntoo.\n\nEmail research -at- wingman-sw.com when you have completed your\nCircularBuffer.\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run main.c by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to make clean.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","output":"compiling CircularBufferTest.cpp\nLinking CircularBuffer_tests\nRunning CircularBuffer_tests\n\nCircularBufferTest.cpp:95: error: Failure in TEST(CircularBuffer, read_write_fill_empty)\n\tLONGS_EQUAL(n, CircularBuffer_Read(buffer)) failed\n\texpected <9 (0x9)>\n\tbut was  <0 (0x0)>\n\n....\nErrors (1 failures, 4 tests, 4 ran, 103 checks, 0 ignored, 0 filtered out, 4 ms)\n\nI'm writing and building.\n/cpputest/build/MakefileWorker.mk:451: recipe for target 'all' failed\nmake: *** [all] Error 1\n"}