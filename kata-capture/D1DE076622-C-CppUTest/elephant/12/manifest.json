{"AllTests.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/CommandLineTestRunner.h\"\n#include <stdio.h>\n\n//please do not change these messages\nconst char * writing = \"I'm writing and building.\";\nconst char * testing = \"[  FAILED  ] Testing, with more to do.\";\nconst char * working = \"[  PASSED  ] I'm done testing and my code works!\";\nconst char * test_driving = \"I'm test-driving.\";\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    const char * exercise_state = writing;\n\n    int result = RUN_ALL_TESTS(ac, av);\n\n    printf(\"%s\\n\", exercise_state);\n\n    return result;\n}\n\n","CircularBuffer.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CircularBuffer.h\"\n#include <assert.h>\n\nstruct CircularBufferStruct\n{\n    unsigned int    capacity;\n    int             empty_value;\n};\n\nCircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value)\n{\n    CircularBuffer * self = (CircularBuffer *)calloc(1, sizeof(CircularBuffer));\n    assert(self);   // Sorry, must have this.  It's essential (to me) if we're not dealing with null values elsewhere\n    self -> capacity = capacity;\n    self -> empty_value = empty_value;\n    return self;\n}\n\nvoid CircularBuffer_Destroy(CircularBuffer * self)\n{\n    free(self);\n}\n\nunsigned int CircularBuffer_Capacity(CircularBuffer * self)\n{\n    return self -> capacity;\n}\n\n\n\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#ifndef CIRCULAR_BUFFER_INCLUDED\n#define CIRCULAR_BUFFER_INCLUDED\n\ntypedef struct CircularBufferStruct CircularBuffer;\n\nCircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value);\nvoid CircularBuffer_Destroy(CircularBuffer *);\n\nunsigned int    CircularBuffer_Capacity(CircularBuffer *);\nint             CircularBuffer_EmptyValue(CircularBuffer *);\n#endif\n","CircularBufferTest.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/TestHarness.h\"\n\nextern \"C\"\n{\n#include \"CircularBuffer.h\"\n}\n\n// Everything in the test group is available\n// to associated test cases\nTEST_GROUP(CircularBuffer)\n{\n    CircularBuffer * buffer;\n    unsigned int capacity = 10;\n    int empty_value = -1;\n\n    // setup runs before each test\n    void setup()\n    {\n        buffer = CircularBuffer_Create(capacity, empty_value);\n    }\n\n    // teardown runs after each test\n    void teardown()\n    {\n        CircularBuffer_Destroy(buffer);\n    }\n};\n\n// each test gets a fresh CurcularBuffer\nTEST(CircularBuffer, create_destroy)\n{\n    // The newly-created thingie should have the right capacity\n    LONGS_EQUAL(capacity, CircularBuffer_Capacity(buffer));\n    \n    // And a read of an empty one should return the right default\n    LONGS_EQUAL(empty_value, CircularBuffer_EmptyValue(buffer));\n    \n    // Check with a different capacity:\n    static CircularBuffer       * other_buffer;\n    static const unsigned int   other_capacity = 42;\n    other_buffer = CircularBuffer_Create(other_capacity, 42);\n    LONGS_EQUAL(other_capacity, CircularBuffer_Capacity(other_buffer));\n    LONGS_EQUAL(42, CircularBuffer_EmptyValue(other_buffer));\n    CircularBuffer_Destroy(other_buffer);\n    \n\n//    FAIL(\"Start here\");\n// These are all the macros you will need.\n//    LONGS_EQUAL(0, 1); // will fail\n//    CHECK_TRUE(false); // will fail\n//    CHECK_FALSE(true); // will fail\n}\n","cyber-dojo.sh":"export CPPUTEST_HOME=/cpputest\n\nmake\n\n\n","makefile":"#Set this to @ to keep the makefile quiet\nSILENCE = @\n\n#---- Outputs ----#\nCOMPONENT_NAME = CircularBuffer\n\n#--- Inputs ----#\nPROJECT_HOME_DIR = .\n\nSRC_FILES = CircularBuffer.c\n\nTEST_SRC_FILES = CircularBufferTest.cpp AllTests.cpp\n\nINCLUDE_DIRS =\\\n  .\\\n  $(CPPUTEST_HOME)/include/ \\\n  $(CPPUTEST_HOME)/include/Platforms/Gcc\\\n\nCPPUTEST_WARNINGFLAGS += -Wall \nCPPUTEST_WARNINGFLAGS += -Werror\nCPPUTEST_WARNINGFLAGS += -Wswitch-default\nCPPUTEST_WARNINGFLAGS += -Wfatal-errors\nCPPUTEST_CXXFLAGS +=  -std=c++0x\nCPPUTEST_CFLAGS += -std=c99\nCPPUTEST_CFLAGS += -Wno-unused-parameter\nCPPUTEST_CXXFLAGS += $(CPPUTEST_PLATFORM_CXXFLAGS)\n\ninclude $(CPPUTEST_HOME)/build/MakefileWorker.mk\n","make-gcov.sh":"#!/bin/bash \n\nmake clean\nmake CPPUTEST_USE_GCOV=Y  gcov\n\nfind . -name \"*.cpp.gcov\" | xargs cat\nfind . -name \"*.c.gcov\"| xargs cat\n\nmake clean\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nEmail research -at- wingman-sw.com with questions or suggestions.  \n\nAbout you\n---------\nPlease add some information about youself when you start the\nexercise. Pressing the 'test' button saves all\nyour edits.  I won't spam you, but may email you about \nyour exercise and what I discover.  I will not reveal your \nname, unless you want me too.  If you choose to tweet about\nthe exercise, please tag me @jwgrenning.\n\nName: \nEmail: \nYour level of C experience (delete choices that are not you):\n- I program in C++ everyday, have programmed in C extensively,\n  and a whole lot of the C++ I program in looks a whole lot\n  like C.\n\nWill you do (please delete all but one choice):\n- test-driven\n\nPlease say something about your engineering/programming experience:\n\nI'm an engineer with over 25 years' experience in software, \nhardware, and system design.  Historically I've mostly worked in\ncommunications, dynamic system control (i.e., motion, thermal,\netc., control); I'm currently doing \"pure software\" at a big-box\nembedded company.\n\n\nObjective\n---------\nWrite a CircularBuffer module in c and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * returns false\n  * loses no prior values\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc or calloc failures\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\n\nWrite CircularBuffer.c.  Once it compiles, test that the\nCircularBuffer is working.  Use the provided main.c to exercise\nyour CircularBuffer.\n\nPlease do all your work in this cyber-dojo environment.\n\nNOTE: In AllTests.cpp, there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are going to start testing, set the variable to\n'testing'. Once you are satisfied that your code works, set it \nto 'working'.  If you are test-driving, there is a setting for you\ntoo.\n\nEmail research -at- wingman-sw.com when you have completed your\nCircularBuffer.\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run main.c by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to make clean.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","output":"compiling CircularBuffer.c\n/cpputest/build/MakefileWorker.mk:507: recipe for target 'objs/CircularBuffer.o' failed\nCircularBuffer.c: In function 'CircularBuffer_Create':\nCircularBuffer.c:17:27: error: 'empty_value' undeclared (first use in this function); did you mean 'default_value'?\n     self -> empty_value = empty_value;\n                           ^~~~~~~~~~~\n                           default_value\ncompilation terminated due to -Wfatal-errors.\nmake: *** [objs/CircularBuffer.o] Error 1\n"}