{"main.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/CommandLineTestRunner.h\"\n#include <stdio.h>\n\n//please do not change these messages\nstatic const char * writing = \"I'm writing and building.\";\nstatic const char * testing = \"[  FAILED  ] Testing, with more to do.\";\nstatic const char * working = \"[  PASSED  ] I'm done testing and my code works!\";\nstatic const char * test_driving = \"I'm test-driving.\";\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    const char * exercise_state = writing;\n\n    int result = RUN_ALL_TESTS(ac, av);\n\n    printf(\"%s\\n\", exercise_state);\n\n    return result;\n}\n\n","CircularBuffer.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at \n//https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CircularBuffer.h\"\n#include <stdbool.h>\n#include <stdlib.h>\n\nstruct CircularBuffer\n{\n    /// Put new values here.\n    int       *  p_in;\n\n    /// Get values from here. Equal to #p_in if the CB is either full or empty.\n    const int *  p_out;\n\n    /// Points to the last element of #store\n    const int *  p_end;\n\n    /// True if the CB is empty.\n    bool         b_empty;\n\n    /// The number of elements allocated to #store.\n    unsigned int capacity;\n\n    /// Default value returned if #CircularBuffer_Get() is called on empty CB.\n    int          def_value;\n\n    /// Memory allocated for storing data in the CB.\n    int          store[];\n};\n\n/**\n * Create a new CircularBuffer (CB) with the given paramters.\n *\n * CBs must be destroyed when no longer needed by calling \n * #CircularBuffer_Destroy() to de-allocate the associated memory.\n *\n * @param capacity The number of integers the CB will be able to hold.\n * @param default_value If the CB is empty, #CircularBuffer_Get will return \n * this value.\n * @return A pointer to the new CB.\n */\nstruct CircularBuffer * CircularBuffer_Create( unsigned int capacity,\n                                                        int default_value )\n{\n    const size_t mem_req = \n        sizeof(struct CircularBuffer) + capacity * sizeof(int);\n\n    struct CircularBuffer * p_new_CB = calloc(1, mem_req);\n\n    p_new_CB->p_in      = p_new_CB->store;\n    p_new_CB->p_out     = p_new_CB->store;\n    p_new_CB->p_end     = p_new_CB->store + capacity - 1;\n    p_new_CB->b_empty   = true;\n    p_new_CB->capacity  = capacity;\n    p_new_CB->def_value = default_value;\n\n    return p_new_CB;\n}\n\n/**\n * Destroy a CircularBuffer (CB) that's no longer needed.\n *\n * This allows the associated memory to be reallocated for something else.\n *\n * @param p_CB A pointer to the CB to destroy.\n */\nvoid CircularBuffer_Destroy(struct CircularBuffer * p_CB)\n{\n    free(p_CB);\n}\n\n/**\n * Determine if the given CircularBuffer (CB) is empty.\n *\n * @param p_CB Pointer to the CB to check\n * @retval true if the CB is empty\n * @retval false if the CB is non-empty\n */\nbool CircularBuffer_IsEmpty(struct CircularBuffer * p_CB)\n{\n    return p_CB->b_empty;\n}\n\n/**\n * Determine if the given CircularBuffer (CB) is full.\n *\n * @param p_CB Pointer to the CB to check\n * @retval true if the CB is full\n * @retval false if the CB is non-full\n */\nbool CircularBuffer_IsFull(struct CircularBuffer * p_CB)\n{\n    return !p_CB->b_empty && p_CB->p_in == p_CB->p_out;\n}\n\n/**\n * Increment the #p_in or #p_out member of a CircularBuffer (CB).\n *\n * If the pointer is already referencing the end of the #store array, then the \n * pointer will be wrapped to the first element.\n *\n * @param p_CB Pointer to the CB being modified.\n * @param pp_io Pointer to #p_in or #p_out member that will be incremented.\n */\nstatic inline void incr_with_wrap( const struct CircularBuffer *  const p_CB,\n                                   const int                   ** const pp_io )\n{\n        if (*pp_io == p_CB->p_end)\n        {\n            *pp_io = p_CB->store;\n        }\n        else\n        {\n            (*pp_io)++;\n        }\n}\n\n/**\n * Add a new value to a CircularBuffer (CB).\n *\n * @param p_CB Pointer to the CB to add the value to\n * @param value The value to add to the CB\n * @retval true if adding the value succeeded\n * @retval false if the CB was full (in which case the CB remains unchanged)\n */\nbool CircularBuffer_Put(struct CircularBuffer * p_CB, int value)\n{\n    const bool b_has_room = !CircularBuffer_IsFull(p_CB);\n\n    if (b_has_room)\n    {\n        *p_CB->p_in = value;\n        incr_with_wrap(p_CB, (const int ** const)&(p_CB->p_in));\n    }\n\n    return b_has_room;\n}\n\n\n/**\n * Remove and return the oldest value from a CircularBuffer (CB).\n *\n * Values are returned in first-in-first-out order.\n *\n * @param p_CB Pointer to the CB to get the value from.\n * @return The value that was removed from the CB or the default value if the \n * CB is empty.\n */\nint CircularBuffer_Get(struct CircularBuffer * p_CB)\n{\n    int retval;\n\n    if (p_CB->b_empty)\n    {\n        retval = p_CB->def_value;\n    }\n    else\n    {\n        retval = *p_CB->p_out;\n        incr_with_wrap(p_CB, (const int ** const)&(p_CB->p_out));\n    }\n\n    return retval;\n}\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#ifndef CIRCULAR_BUFFER_INCLUDED\n#define CIRCULAR_BUFFER_INCLUDED\n\n#include <stdbool.h>\n\n// You should not change this file. \n// The struct members go only in the .c file\n// You need to implement each function\n\nstruct CircularBuffer;\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value);\nvoid CircularBuffer_Destroy(struct CircularBuffer *);\nbool CircularBuffer_IsEmpty(struct CircularBuffer *);\nbool CircularBuffer_IsFull(struct CircularBuffer *);\nbool CircularBuffer_Put(struct CircularBuffer *, int);\nint CircularBuffer_Get(struct CircularBuffer *);\nunsigned int CircularBuffer_Capacity(struct CircularBuffer *);\n\n#endif\n","CircularBufferTest.cpp":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CppUTest/TestHarness.h\"\n\nextern \"C\"\n{\n    #include \"CircularBuffer.h\"\n}\n\n\n// Everything in the test group is available\n// to associated test cases\nTEST_GROUP(CircularBuffer)\n{\n    CircularBuffer* buffer = 0;\n    const unsigned int capacity = 10;\n    const int emptyValue = -1;\n\n    // setup runs before each test\n    void setup()\n    {\n        buffer = CircularBuffer_Create(capacity, emptyValue);\n    }\n\n    // teardown runs after each test\n    void teardown()\n    {\n        CircularBuffer_Destroy(buffer);\n    }\n\n};\n\n// PUSH THE TEST BUTTON WHEN YOU START TO WORK\n// Pushing the test button saves your work and runs the build.\n\n// each test gets a fresh CurcularBuffer\nTEST(CircularBuffer, create_destroy)\n{\n    FAIL(\"Start here\");\n}\n\n// Each test in a group must have a unique name\n// Make as many tests as you like\nTEST(CircularBuffer, test_with_all_the_macros_you_should_need_for_this_exercise)\n{\n    LONGS_EQUAL(capacity, 10);\n    LONGS_EQUAL(emptyValue, -1);\n    CHECK(buffer != 0);\n    CHECK(true);\n    CHECK_TRUE(true);\n    CHECK_FALSE(false);\n    // If you are not used to a xUnit style of test harness,\n    // please do the other exercise offered in the invitation.\n    // find more about CppUTest at cpputest.org\n}\n","cyber-dojo.sh":"export CPPUTEST_HOME=/cpputest\nmake\n# make clean\n\n\n","makefile":"#Set this to @ to keep the makefile quiet\nSILENCE = @\n\n#---- Outputs ----#\nCOMPONENT_NAME = CircularBuffer\n\n#--- Inputs ----#\nPROJECT_HOME_DIR = .\n\nSRC_FILES = CircularBuffer.cpp\n\nTEST_SRC_FILES = CircularBufferTest.cpp main.cpp\n\nINCLUDE_DIRS =\\\n  .\\\n  $(CPPUTEST_HOME)/include/ \\\n  $(CPPUTEST_HOME)/include/Platforms/Gcc\\\n\nCPPUTEST_CFLAGS += -std=c99\nCPPUTEST_CXXFLAGS += -std=c++11\nCPPUTEST_CFLAGS += -Wno-unused-parameter\nCPPUTEST_WARNINGFLAGS += -Wall \nCPPUTEST_WARNINGFLAGS += -Werror\nCPPUTEST_WARNINGFLAGS += -Wfatal-errors\nCPPUTEST_WARNINGFLAGS += -Wno-reserved-id-macro\nCPPUTEST_WARNINGFLAGS += -Wno-keyword-macro\nCPPUTEST_WARNINGFLAGS += -Wno-unused-variable\nCPPUTEST_WARNINGFLAGS += -Wno-c++98-compat-pedantic\nCPPUTEST_WARNINGFLAGS += -Wno-reserved-id-macro\ninclude $(CPPUTEST_HOME)/build/MakefileWorker.mk\n","make-gcov.sh":"#!/bin/bash \n\nmake clean\nmake CPPUTEST_USE_GCOV=Y  gcov\n\nfind . -name \"*.cpp.gcov\" | xargs cat\nfind . -name \"*.c.gcov\"| xargs cat\n\nmake clean\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nEmail research -at- wingman-sw.com with questions or suggestions.  \n\nI may email you about your exercise and what I discover.\n\nYou should consider your code public, I may respectively\ninclude it in tweets or blog articles. I will not reveal \nyour name, unless you want me too.  If you choose to tweet\nabout the exercise, please tag me @jwgrenning.\n\nAbout you\n---------\nPlease add some information about yourself when you start the\nexercise. Pressing the 'test' button saves all your edits.\n\nWhat is your level of C experience (delete choices that are not you)?\n    - I program in C everyday\n\nPlease say something about your engineering/programming background:\n    I'm an electrical enginner with about 4 years professional experience, most \n    of that involved embedded programming in C. Target is usually a \n    microcontrollerw (bare-metal), but I've also done some embedded Linux \n    application programming.\n\nPUSH THE TEST BUTTON NOW TO SAVE YOUR WORK AND\nRECORD THE START TIME OF YOUR EXERCISE.\n\nIf you take some breaks during the exercise, please add\nthe time and durattion of your break here.\n\nWill you do (please delete all but one choice):\n    - test-when-i-feel-like-it \n\nObjective\n---------\nWrite a CircularBuffer and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * preserves prior values\n  * returns false\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n* When you are finished, your production code should \n  run without printing anything.\n* Make your code clean and readble, something you'd\n  attach to your resume.\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc or calloc failures\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\n\nWrite and test CircularBuffer.  Use the provided CircularBufferTest.cpp\nto exercise your CircularBuffer.  Add as many test cases \nas you need.\n\nPlease do all your work in this cyber-dojo environment.\n\nIf you take any breaks, please let me know the approximate \ncycle number (upper right side of the red, green and \nyellow traffic lights) and duration.\n\nNOTE: In the main file, that there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are going to start testing, set the variable to\n'testing'. Once you are satisfied that your code works, set it \nto 'working'.  If you are test-driving, there is a setting for you\ntoo.\n\nEmail the URL of your exercises to 'research -at- wingman-sw.com'\nwhen you have completed your CircularBuffer.\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to make clean.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","output":"compiling CircularBuffer.c\nBuilding archive lib/libCircularBuffer.a\nr - objs/CircularBuffer.o\nLinking CircularBuffer_tests\nRunning CircularBuffer_tests\n.\nCircularBufferTest.cpp:39: error: Failure in TEST(CircularBuffer, create_destroy)\n\tStart here\n\n.\nErrors (1 failures, 2 tests, 2 ran, 7 checks, 0 ignored, 0 filtered out, 2 ms)\n\nI'm writing and building.\n/cpputest/build/MakefileWorker.mk:451: recipe for target 'all' failed\nmake: *** [all] Error 1\n"}