{"main.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include <stdio.h>\n#include \"CircularBuffer.h\"\n\n//please do not change these messages\nconst char * writing = \"I'm writing and building.\";\nconst char * testing = \"[  FAILED  ] Testing, with more to do.\";\nconst char * working = \"[  PASSED  ] I'm done testing and my code works!.\";\n\nint main(int ac, char** av)\n{\n    // see the instructions on setting your state in the exercise\n    const char * exercise_state = testing;\n\n    unsigned int capacity = 10;\n    int empty_value = -1;\n\n    struct CircularBuffer * b = CircularBuffer_Create(capacity, empty_value);\n    CircularBuffer_Destroy(b);\n\n    printf(\"%s\\n\", exercise_state);\n    return 0;\n}\n\n","CircularBuffer.c":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#include \"CircularBuffer.h\"\n#include <stdlib.h>\n#include <stdio.h>\n\n/*===========================================================================\n * COMMON DEFINES\n *=========================================================================*/\n\ntypedef signed char             int8;\ntypedef short                   int16;\ntypedef int                     int32;\n\ntypedef unsigned char           uint8;\ntypedef unsigned short          uint16;\ntypedef unsigned int            uint32;\n\ntypedef int                     boolean;\n\nstruct CircularBuffer\n{\n    // keep compiler from complaining about an empty struct\n    int32 *buffer;\n    uint8 inIndex;\n    uint8 outIndex;\n    uint32 bufferSize;\n    uint32 currentSize;\n};\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value)\n{\n    struct CircularBuffer * self = (struct CircularBuffer *)calloc(1, sizeof(struct CircularBuffer));\n    \n    self->buffer = (int32 *) malloc (capacity * sizeof(int32));\n    if (self->buffer == NULL) {\n        printf(\"Buffer initialization failed\");\n        exit (1);\n    }\n\n    for(unit32 i=0; i < capacity; i++) {\n        self->buffer[i] = default_value;\n    }\n\n    self->inIndex  = 0;\n    self->outIndex = 0;\n    self->bufferSize = capacity;\n    \n    return self;\n}\n\nvoid CircularBuffer_Destroy(struct CircularBuffer * self)\n{\n    free(self->buffer);\n    free(self);\n}\n\n// PUSH THE TEST BUTTON WHEN YOU START TO WORK\n// Pushing the test button saves your work and runs the build.\n","CircularBuffer.h":"//- Copyright (c) 2018 James Grenning -- See license.txt at https://github.com/jwgrenning/wingman-cyber-dojo\n\n#ifndef CIRCULAR_BUFFER_INCLUDED\n#define CIRCULAR_BUFFER_INCLUDED\n\n#include <stdbool.h>\n\n// You should not change this file\n\nstruct CircularBuffer;\n\nstruct CircularBuffer * CircularBuffer_Create(unsigned int capacity, int default_value);\nvoid CircularBuffer_Destroy(struct CircularBuffer *);\nbool CircularBuffer_IsEmpty(struct CircularBuffer *);\nbool CircularBuffer_IsFull(struct CircularBuffer *);\nbool CircularBuffer_Put(struct CircularBuffer *, int);\nint CircularBuffer_Get(struct CircularBuffer *);\nunsigned int CircularBuffer_Capacity(struct CircularBuffer *);\n\n#endif\n","cyber-dojo.sh":"make\n# make clean\n","instructions":"Copyright (c) 2018 James Grenning -- See license.txt\nat https://github.com/jwgrenning/wingman-cyber-dojo\n\nPlease read all the instructions carefully before starting.  \n\nEmail research -at- wingman-sw.com with questions or suggestions.  \n\nAbout you\n---------\nPlease add some information about youself when you start the\nexercise. Pressing the 'test' button saves all\nyour edits.  I may email you about your exercise and what I discover.\n\nYou should consider your code public, I may respectively\ninclude it in tweets or blog articles. I will not reveal \nyour name, unless you want me too.  If you choose to tweet\nabout the exercise, please tag me @jwgrenning.\n\nWhat is your level of C experience (delete choices that are not you)?\n- I program in C everyday\n\nPlease say something about your engineering/programming background:\n\nEngineer since 2013, worked on LTE, WiFi, TCP/IP stack\n\nPUSH THE TEST BUTTON NOW TO SAVE YOUR WORK AND\nRECORD THE START TIME OF YOUR EXERCISE.\n\nIf you take some breaks during the exercise, please add\nthe time and durattion of your break here.\n\nObjective\n---------\nWrite a CircularBuffer module in c and make sure it works.\n\nRequirements\n------------\n* A CircularBuffer is sized during create.\n* It stores integers.\n* It is FIFO.\n* It can report its total capacity\n* It can report if it is empty\n* It can report if it is full\n* Putting to a full CircularBuffer\n  * returns false\n  * loses no prior values\n* Getting from an empty CircularBuffer returns a\n  default value provided during create function.\n\nFor this exercise, do not worry about:\n--------------------------------------\n* Null pointers\n* Concurrency\n* malloc or calloc failures\n\nCircularBuffer Diagram\n----------------------\nwww.wingman-sw.com/files/cyber-dojo/CircularBuffer.pdf\n\nStarting point\n--------------\nThe CircularBuffer interface is defined in CircularBuffer.h.\nYou must develop your implementation to that interface.  \nThe architects said so.\n\nYou have all the files you need, and should not need to\nadd files or modify the makefile.\n\nInstructions\n------------\nDo all your work from within this cyber-dojo environment.\nPressing the 'test' button saves, builds and then runs your code.\n\nWrite CircularBuffer.c.  Once it compiles, test that the\nCircularBuffer is working.  Use the provided main.c to exercise\nyour CircularBuffer.  Feel free to use printf or whatever you\nwould normally do.  Do not use any unit test framework.\nPlease do all your work in this cyber-dojo environment.\n\nNOTE: In the main file, that there is a 'exercise_state' variable.\nIt is initially set to 'writing'.  Once you finish writing\ncode, and are going to start testing, set the variable to\n'testing'. Once you are satisfied that your code works, set it \nto 'working'. \n\nEmail research -at- wingman-sw.com when you have completed your\nCircularBuffer.  Tell your friends!\n\nControlling the cyber-dojo test environment\n-------------------------------------------\nCyber-dojo does not work so great with IE, so please use \nChrome, Firefox, Safari, or another browser.\n\nCompile and run main.c by pressing the 'test' button.  The\nshortcut key is alt-t.\n\nIf you need to do a clean build, edit cyber-dojo.sh to make clean.\nYou'll see commented out code in cyber-dojo.sh to make clean.\n\n","makefile":"TARGET = CircularBufferTest\nCC = gcc\nCFLAGS = -Wall\n\n.PHONY: default all clean\n\ndefault: $(TARGET)\nall: default\n\nOBJECTS = $(patsubst %.c, %.o, $(wildcard *.c))\nHEADERS = $(wildcard *.h)\n\n%.o: %.c $(HEADERS)\n\t$(CC) $(CFLAGS) -c $< -o $@\n\n.PRECIOUS: $(TARGET) $(OBJECTS)\n\n$(TARGET): $(OBJECTS)\n\t$(CC) $(OBJECTS) -Wall $(LIBS) -o $@\n\t./$(TARGET)\n\nclean:\n\t-rm -f *.o\n\t-rm -f $(TARGET)\n","output":"gcc -Wall -c CircularBuffer.c -o CircularBuffer.o\nmakefile:14: recipe for target 'CircularBuffer.o' failed\nCircularBuffer.c: In function 'CircularBuffer_Create':\nCircularBuffer.c:41:9: error: unknown type name 'unit32'; did you mean 'uint32'?\n     for(unit32 i=0; i < capacity; i++) {\n         ^~~~~~\n         uint32\nmake: *** [CircularBuffer.o] Error 1\n"}